zoox2 <- rep(i, nrow(df))                       # Create new row
df[nrow(df) + 1, ] <- zoox2                   # Append new row
}
zoox2
zoox2 <- rep(data.frame(t(i)), nrow(df))                       # Create new row
for(i in zooxLst) {                                   # Head of for-loop
zoox2 <- rep(data.frame(t(i)), nrow(df))                       # Create new row
df[nrow(df) + 1, ] <- zoox2                   # Append new row
}
View(zooxLst)
View(zoox2)
View(zoox2)
View(df)
df = data.frame(t(zooxLst$`1`)) %>% .[-1,]
for(i in zooxLst) {                                   # Head of for-loop
zoox2 <- rep(data.frame(t(i)))                       # Create new row
df[nrow(df) + 1, ] <- zoox2                   # Append new row
}
warnings()
for(i in zooxLst){
d = rbind(d, data.frame(t(i)))
}
df = data.frame(t(zooxLst$`1`)) %>% .[-1,]
for(i in zooxLst){
df = rbind(df, data.frame(t(i)))
}
View(df)
df = NULL
for(i in zooxLst){
df = rbind(df, data.frame(t(i)))
}
df = NULL
for(i in zooxLst){
df = rbind(df, data.frame(t(i)))
}
View(df)
zooxMaps = NULL
zooxMaps = NULL
for(i in zooxLst){
zooxMaps = rbind(df, data.frame(t(i)))
}
colnames(zooxMaps)
zoox$V1
zoox$V1[c(1:20)]
zooxMaps = NULL
for(i in zooxLst){
zooxMaps = rbind(df, data.frame(t(i)))
}
colnames(zooxMaps) = c("sample",zoox$V1[c(2:20)])
View(zooxMaps)
zooxMaps$Symbiodinium = sum(zooxMaps[c(1:5)])
zooxMaps$Symbiodinium = sum(zooxMaps[c(1:5),])
zooxMaps$Symbiodinium = sum(zooxMaps[c(2:6),])
zooxMaps$Symbiodinium = sum(zooxMaps[,c(2:6)])
zooxMaps[,c(2:6)]
sum(zooxMaps[,c(2:6)])
sum()
zooxMaps$Symbiodinium = rowSums(zooxMaps(2:6))
zooxMaps$Symbiodinium = rowSums(zooxMaps[2:6])
rowSums(zooxMaps[2:6])
zooxMaps[2,3]
class(zooxMaps[2,3])
zooxMaps[1,0]
zooxMaps[0]
zooxMaps[2,1]
zooxMaps[2,]
zooxMaps[,2]
zooxMaps[,1]
zooxMaps[,c(2:20)]
as.integer(zooxMaps[,c(2:20)])
class(zooxMaps[,c(2:20)])
zooxMaps[,1]
zooxMaps %>% mutate_if(is.character,as.numeric)
zooxMaps = zooxMaps %>% mutate_if(is.character,as.numeric)
zooxMaps$Symbiodinium = rowSums(zooxMaps[2:6])
zooxMaps = zooxMaps %>% mutate_if(is.factor,as.numeric)
zooxMaps$Symbiodinium = rowSums(zooxMaps[2:6])
zooxMaps$Breviolum = rowSums(zooxMaps[7:10])
zoox = read.delim("~/Desktop/zooxAlignmentOutput", header = FALSE, check.names = FALSE)
head(zoox)
zoox$V2[is.na(zoox$V2)] <- as.character(zoox$V1[is.na(zoox$V2)])
zoox$V1 = gsub(pattern = "fk.*", "chr", zoox$V1)
zoox$V2 = gsub(".trim.*", "", zoox$V2)
zoox = zoox %>% filter(zoox$V1 != "*")
zooxLst = split(zoox$V2, as.integer(gl(length(zoox$V2), 20, length(zoox$V2))))
zooxMaps = NULL
for(i in zooxLst){
zooxMaps = rbind(df, data.frame(t(i)))
}
colnames(zooxMaps) = c("sample",zoox$V1[c(2:20)])
zooxMaps = zooxMaps %>% mutate_if(is.factor,as.numeric)
zooxMaps$Symbiodinium = rowSums(zooxMaps[2:6])
zooxMaps$Breviolum = rowSums(zooxMaps[7:10])
zooxMaps$Cladcopium = rowSums(zooxMaps[11:16])
zooxMaps$Durusdinium = rowSums(zooxMaps[17:20])
zoox = read.delim("~/Desktop/zooxAlignmentOutput", header = FALSE, check.names = FALSE)
head(zoox)
zoox$V2[is.na(zoox$V2)] <- as.character(zoox$V1[is.na(zoox$V2)])
zoox$V1 = gsub(pattern = "fk.*", "chr", zoox$V1)
zoox$V2 = gsub(".trim.*", "", zoox$V2)
zoox = zoox %>% filter(zoox$V1 != "*")
zooxLst = split(zoox$V2, as.integer(gl(length(zoox$V2), 20, length(zoox$V2))))
zooxMaps = NULL
for(i in zooxLst){
zooxMaps = rbind(df, data.frame(t(i)))
}
colnames(zooxMaps) = c("sample",zoox$V1[c(2:20)])
?as.numeric
zooxMaps = zooxMaps %>% mutate_if(is.factor,is.numeric)
zooxMaps = NULL
for(i in zooxLst){
zooxMaps = rbind(df, data.frame(t(i)))
}
colnames(zooxMaps) = c("sample",zoox$V1[c(2:20)])
zooxMaps = zooxMaps %>% mutate_if(is.factor,as.numeric)
zooxMaps = NULL
for(i in zooxLst){
zooxMaps = rbind(df, data.frame(t(i)))
}
colnames(zooxMaps) = c("sample",zoox$V1[c(2:20)])
zooxMaps %>% mutate_at(chr1,as.numeric)
zooxMaps %>% mutate_at(zooxMaps$chr1,as.numeric)
class(zooxMaps$chr1)
class(zooxMaps$sample)
zooxMaps %>% mutate_at('chr1',as.numeric) %>% str()
zooxMaps %>% mutate_at(c(2:4),as.numeric) %>% str()
test = zooxMaps %>% mutate_at(c(2:4),as.numeric) %>% str()
str(zooxMaps)
str(zooxMaps$chr1)
as.numeric(zooxMaps$chr1)
as.character(zooxMaps$chr1)
str(as.character(zooxMaps$chr1))
str(as.character(as.numeric(zooxMaps$chr1)))
zooxMaps %>% as.numeric(levels('chr1'))['chr1']
zooxMaps$test = zooxMaps %>% as.numeric(levels('chr1'))['chr1']
zooxMaps$chr1 = zooxMaps %>% as.numeric(levels('chr1'))['chr1']
zooxMaps$chr1
str(zooxMaps)
zooxMaps$chr1 = as.numeric(levels(zooxMaps$chr1))[zooxMaps$chr1]
str(zooxMaps$chr1)
zooxMaps$chr2 = as.numeric(levels(zooxMaps$chr2))[zooxMaps$chr2]
zooxMaps$chr3 = as.numeric(levels(zooxMaps$chr3))[zooxMaps$chr3]
zooxMaps[2:20,]
zooxMaps[,2:20]
zooxMaps = NULL
for(i in zooxLst){
zooxMaps = rbind(df, data.frame(t(i)))
}
colnames(zooxMaps) = c("sample",zoox$V1[c(2:20)])
str(zooxMaps)
for(i in zooxMaps[,2:20]){
zooxMaps[,i] = as.numeric(levels(zooxMaps[,i]))[zooxMaps[,i]]
}
str(zooxMaps)
for(i in c(2:20){
for(i in c(2:20)){
zooxMaps[,i] = as.numeric(levels(zooxMaps[,i]))[zooxMaps[,i]]
}
str(zooxMaps)
zooxMaps$Symbiodinium = rowSums(zooxMaps[2:6])
zooxMaps$Breviolum = rowSums(zooxMaps[7:10])
zooxMaps$Cladcopium = rowSums(zooxMaps[11:16])
zooxMaps$Durusdinium = rowSums(zooxMaps[17:20])
zooxMaps = zooxMaps[,c(1, 21:24)]
zooxMaps
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, fig.align = 'left')
knitr::opts_knit$set(root.dir = '../revisedData')
options(width = 88, scipen = 4)
zoox = read.delim("zooxAlignmentOutput", header = FALSE, check.names = FALSE)
head(zoox)
zoox$V2[is.na(zoox$V2)] <- as.character(zoox$V1[is.na(zoox$V2)])
zoox$V1 = gsub(pattern = "fk.*", "chr", zoox$V1)
zoox$V2 = gsub(".trim.*", "", zoox$V2)
zoox = zoox %>% filter(zoox$V1 != "*")
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, fig.align = 'left')
knitr::opts_knit$set(root.dir = '../revisedData')
options(width = 88, scipen = 4)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, fig.align = 'left')
knitr::opts_knit$set(root.dir = '../revisedData')
options(width = 88, scipen = 4)
knitr::opts_knit$set(root.dir = '../revisedData')
setwd('../revisedData')
setwd('../revisedData')
if (!require("pacman")) install.packages("pacman")
pacman::p_load("adegenet", "cowplot", "dendextend", "flextable", "gdata", "ggdendro", "hierfstat", "Imap", "kableExtra", "paletteer", "patchwork", "officer", "poppr", "RColorBrewer", "reshape2", "StAMPP", "tidyverse", "vcfR", "vegan", "WGCNA", "boa", "plyr", "rgdal", "broom", "rgeos", "ggmap", "moments", "car", "multcompView", "lsmeans", "ggsn", "sf","ggspatial")
popData = read.csv("inds2popsNoClonesPopDepth.csv") # Reads in population data for each sample
zoox = read.delim("zooxAlignmentOutput", header = FALSE, check.names = FALSE)
head(zoox)
zoox$V2[is.na(zoox$V2)] <- as.character(zoox$V1[is.na(zoox$V2)])
zoox$V1 = gsub(pattern = "fk.*", "chr", zoox$V1)
zoox$V2 = gsub(".trim.*", "", zoox$V2)
zoox = zoox %>% filter(zoox$V1 != "*")
zooxLst = split(zoox$V2, as.integer(gl(length(zoox$V2), 20, length(zoox$V2))))
zooxMaps = NULL
for(i in zooxLst){
zooxMaps = rbind(zooxMaps, data.frame(t(i)))
}
for(i in zooxLst){
zooxMaps = rbind(zooxMaps, data.frame(t(i)))
}
colnames(zooxMaps) = c("sample",zoox$V1[c(2:20)])
for(i in c(2:20)){
zooxMaps[,i] = as.numeric(levels(zooxMaps[,i]))[zooxMaps[,i]]
}
str(zooxMaps)
zooxMaps$Symbiodinium = rowSums(zooxMaps[2:6])
zooxMaps$Breviolum = rowSums(zooxMaps[7:10])
zooxMaps$Cladcopium = rowSums(zooxMaps[11:16])
zooxMaps$Durusdinium = rowSums(zooxMaps[17:20])
zooxMaps = zooxMaps[,c(1, 21:24)]
zooxMapsT = cbind(popData,zooxMaps)
View(zooxMapsT)
zoox = read.delim("zooxAlignmentOutput", header = FALSE, check.names = FALSE)
head(zoox)
zoox$V2[is.na(zoox$V2)] <- as.character(zoox$V1[is.na(zoox$V2)])
zoox$V1 = gsub(pattern = "fk.*", "chr", zoox$V1)
zoox$V2 = gsub(".trim.*", "", zoox$V2)
zoox = zoox %>% filter(zoox$V1 != "*")
zooxLst = split(zoox$V2, as.integer(gl(length(zoox$V2), 20, length(zoox$V2))))
zooxMaps = NULL
for(i in zooxLst){
zooxMaps = rbind(zooxMaps, data.frame(t(i)))
}
for(i in zooxLst){
zooxMaps = rbind(zooxMaps, data.frame(t(i)))
}
colnames(zooxMaps) = c("sample",zoox$V1[c(2:20)])
colnames(zooxMaps) = c("sample",zoox$V1[c(2:20)])
for(i in c(2:20)){
zooxMaps[,i] = as.numeric(levels(zooxMaps[,i]))[zooxMaps[,i]]
}
str(zooxMaps)
zooxMaps$Symbiodinium = rowSums(zooxMaps[2:6])
zooxMaps$Breviolum = rowSums(zooxMaps[7:10])
zooxMaps$Cladcopium = rowSums(zooxMaps[11:16])
zooxMaps$Durusdinium = rowSums(zooxMaps[17:20])
zooxMaps = zooxMaps[,c(1, 21:24)]
View(zooxMaps)
zoox = read.delim("zooxAlignmentOutput", header = FALSE, check.names = FALSE)
head(zoox)
View(zoox)
zoox$V2[is.na(zoox$V2)] <- as.character(zoox$V1[is.na(zoox$V2)])
zoox$V1 = gsub(pattern = "fk.*", "chr", zoox$V1)
zoox$V2 = gsub(".trim.*", "", zoox$V2)
zoox = zoox %>% filter(zoox$V1 != "*")
zooxLst = split(zoox$V2, as.integer(gl(length(zoox$V2), 20, length(zoox$V2))))
View(zooxLst)
zooxMaps = NULL
for(i in zooxLst){
zooxMaps = rbind(zooxMaps, data.frame(t(i)))
}
View(zooxMaps)
colnames(zooxMaps) = c("sample",zoox$V1[c(2:20)])
View(zooxMaps)
for(i in c(2:20)){
zooxMaps[,i] = as.numeric(levels(zooxMaps[,i]))[zooxMaps[,i]]
}
str(zooxMaps)
zooxMaps$Symbiodinium = rowSums(zooxMaps[2:6])
zooxMaps$Breviolum = rowSums(zooxMaps[7:10])
zooxMaps$Cladcopium = rowSums(zooxMaps[11:16])
zooxMaps$Durusdinium = rowSums(zooxMaps[17:20])
zooxMaps = zooxMaps[,c(1, 21:24)]
zooxMapsT = cbind(popData, zooxMaps)
View(zooxMapsT)
zooxMapsT = cbind(zooxMaps[,1], popData[,2], zooxMaps[,c(2:5)])
zooxMaps[,1]
zooxMapsT = cbind(zooxMaps[,1], popData[,2], zooxMaps[,c(2:5)])
zoox = read.delim("zooxAlignmentOutput", header = FALSE, check.names = FALSE)
head(zoox)
zoox$V2[is.na(zoox$V2)] <- as.character(zoox$V1[is.na(zoox$V2)])
zoox$V1 = gsub(pattern = "fk.*", "chr", zoox$V1)
zoox$V2 = gsub(".trim.*", "", zoox$V2)
zoox = zoox %>% filter(zoox$V1 != "*")
zooxLst = split(zoox$V2, as.integer(gl(length(zoox$V2), 20, length(zoox$V2))))
zooxMaps = NULL
for(i in zooxLst){
zooxMaps = rbind(zooxMaps, data.frame(t(i)))
}
for(i in zooxLst){
zooxMaps = rbind(zooxMaps, data.frame(t(i)))
}
colnames(zooxMaps) = c("sample",zoox$V1[c(2:20)])
colnames(zooxMaps) = c("sample",zoox$V1[c(2:20)])
for(i in c(2:20)){
zooxMaps[,i] = as.numeric(levels(zooxMaps[,i]))[zooxMaps[,i]]
}
str(zooxMaps)
zooxMaps$Symbiodinium = rowSums(zooxMaps[2:6])
zooxMaps$Breviolum = rowSums(zooxMaps[7:10])
zooxMaps$Cladcopium = rowSums(zooxMaps[11:16])
zooxMaps$Durusdinium = rowSums(zooxMaps[17:20])
zooxMaps = zooxMaps[,c(1, 21:24)]
zooxMapsT = cbind(zooxMaps[,1], popData[,2], zooxMaps[,c(2:5)])
zoox = read.delim("zooxAlignmentOutput", header = FALSE, check.names = FALSE)
head(zoox)
zoox$V2[is.na(zoox$V2)] <- as.character(zoox$V1[is.na(zoox$V2)])
zoox$V1 = gsub(pattern = "fk.*", "chr", zoox$V1)
zoox$V2 = gsub(".trim.*", "", zoox$V2)
zoox = zoox %>% filter(zoox$V1 != "*")
zooxLst = split(zoox$V2, as.integer(gl(length(zoox$V2), 20, length(zoox$V2))))
zooxMaps = NULL
for(i in zooxLst){
zooxMaps = rbind(zooxMaps, data.frame(t(i)))
}
colnames(zooxMaps) = c("sample",zoox$V1[c(2:20)])
for(i in c(2:20)){
zooxMaps[,i] = as.numeric(levels(zooxMaps[,i]))[zooxMaps[,i]]
}
str(zooxMaps)
zooxMaps$Symbiodinium = rowSums(zooxMaps[2:6])
zooxMaps$Breviolum = rowSums(zooxMaps[7:10])
zooxMaps$Cladcopium = rowSums(zooxMaps[11:16])
zooxMaps$Durusdinium = rowSums(zooxMaps[17:20])
zooxMaps = zooxMaps[,c(1, 21:24)]
zooxMapsT = cbind(zooxMaps[,1], popData[,2], zooxMaps[,c(2:5)])
dfZoox$Population=as.factor(dfZoox$Population)
zooxMapsT = cbind("Sample" = zooxMaps[,1], "Population" = popData[,2], zooxMaps[,c(2:5)])
dfZoox = cbind("Sample" = zooxMaps[,1], "Population" = popData[,2], zooxMaps[,c(2:5)])
dfZoox$Population=as.factor(dfZoox$Population)
dfZoox$Population
levels(dfZoox$Population)
dfZoox$Population = factor(dfZoox$Population, levels = levels(dfZoox$Population)[c(6,5,4,3,2,1,8,7)])
levels(dfZoox$Population) = c("DRTS-Shallow", "DRTS-Mesophotic", "DRTN-Shallow", "DRTN-Mesophotic", "LK-Shallow", "LK-Mesophotic", "UK-Shallow", "UK-Mesophotic")
levels(dfZoox$Population)
dfZoox = dfZoox[order(dfZoox$Population),]
dfZoox$Order = c(1:nrow(dfZoox))
zDat = melt(dfZoox, id.vars = c("Sample", "Population", "Order"), variable.name = "Symbiont", value.name = "Fraction")
colPalZoox = brewer.pal(4, "BrBG")
names(colPalZoox) = levels(zDat$Symbiont)
zooxPlotA = ggplot(data = zDat, aes(x = Order, y = Fraction, fill = Symbiont, order = Order)) +
geom_bar(stat = "identity", position = "stack", colour = "grey25", width = 1) +
xlab("Population") +
scale_x_discrete(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0), labels = function(x) paste0(x*100, "%")) +
scale_fill_manual(values = colPalZoox, name = "Symbiodiniaceae genus") +
coord_cartesian(ylim = c(-.01,1.01)) +
facet_grid(.~fct_inorder(Population), drop=TRUE, scales = "free", switch = "x", space = "free") +
theme_bw()
zooxPlot = zooxPlotA + theme(plot.title = element_text(hjust = 0.5),
panel.grid=element_blank(),
panel.background=element_rect(fill=NA, colour="grey25"),
panel.spacing.x=grid:::unit(0, "lines"),
panel.border = element_rect(color="black", size=2, linetype="solid"),
axis.text.y=element_text(size=14),
axis.text.x = element_blank(),
axis.title.y = element_blank(),
axis.ticks.x=element_blank(),
strip.background=element_blank(),
strip.text=element_text(size=12, angle=90),
legend.key=element_blank(),
legend.position = "right",
#legend.title = element_blank(),
legend.text = element_text(face = "italic"))
zooxPlot
ggsave("../revisedFigures/figures/zooxPlot.tiff", plot = zooxPlot, width = 30, height = 15, units = "cm", dpi = 300)
ggsave("../revisedFigures/zooxPlot.tiff", plot = zooxPlot, width = 30, height = 15, units = "cm", dpi = 300)
levels(zDat$Symbiont)
zooxProp = zooxMaps
View(zooxProp)
zooxMaps$sum = apply(zooxMaps[, c(1:length(its2ProfsPerc[1,]))], 1, function(x) {
sum(x, na.rm = T)
})
zooxProp$sum = apply(zooxProp[, c(1:length(zooxProp[1,]))], 1, function(x) {
sum(x, na.rm = T)
})
zooxProp$sum = apply(zooxProp[, c(2:length(zooxProp[1,]))], 1, function(x) {
sum(x, na.rm = T)
})
zooxProp = cbind(zooxProp[, c(1)], (zooxProp[, c(2:(ncol(zooxProp)-1))]
/ zooxProp$sum))
head(zooxProp)
apply(zooxProp[, c(2:(ncol(zooxProp)))], 1, function(x) {
sum(x, na.rm = T)
})
dfZoox = cbind("Sample" = zooxProp[,1], "Population" = popData[,2], zooxProp[,c(2:5)])
View(dfZoox)
dfZoox$Population=as.factor(dfZoox$Population)
dfZoox$Population = factor(dfZoox$Population, levels = levels(dfZoox$Population)[c(6,5,4,3,2,1,8,7)])
levels(dfZoox$Population) = c("DRTS-Shallow", "DRTS-Mesophotic", "DRTN-Shallow", "DRTN-Mesophotic", "LK-Shallow", "LK-Mesophotic", "UK-Shallow", "UK-Mesophotic")
dfZoox = dfZoox[order(dfZoox$Population),]
dfZoox$Order = c(1:nrow(dfZoox))
zDat = melt(dfZoox, id.vars = c("Sample", "Population", "Order"), variable.name = "Symbiont", value.name = "Fraction")
colPalZoox = brewer.pal(4, "BrBG")
names(colPalZoox) = levels(zDat$Symbiont)
zooxPlotA = ggplot(data = zDat, aes(x = Order, y = Fraction, fill = Symbiont, order = Order)) +
geom_bar(stat = "identity", position = "stack", colour = "grey25", width = 1) +
xlab("Population") +
scale_x_discrete(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0), labels = function(x) paste0(x*100, "%")) +
scale_fill_manual(values = colPalZoox, name = "Symbiodiniaceae genus") +
coord_cartesian(ylim = c(-.01,1.01)) +
facet_grid(.~fct_inorder(Population), drop=TRUE, scales = "free", switch = "x", space = "free") +
theme_bw()
zooxPlot = zooxPlotA + theme(plot.title = element_text(hjust = 0.5),
panel.grid=element_blank(),
panel.background=element_rect(fill=NA, colour="grey25"),
panel.spacing.x=grid:::unit(0, "lines"),
panel.border = element_rect(color="black", size=2, linetype="solid"),
axis.text.y=element_text(size=14),
axis.text.x = element_blank(),
axis.title.y = element_blank(),
axis.ticks.x=element_blank(),
strip.background=element_blank(),
strip.text=element_text(size=12, angle=90),
legend.key=element_blank(),
legend.position = "right",
#legend.title = element_blank(),
legend.text = element_text(face = "italic"))
zooxPlot
ggsave("../revisedFigures/zooxPlot.tiff", plot = zooxPlot, width = 30, height = 15, units = "cm", dpi = 300)
zooxHostProportions=read.csv("zooxMcavRatio.csv", header=TRUE)
# zooxHostProportions=read.csv("zooxMcavRatio.csv", header=TRUE)
# skewness(zooxHostProportions$zooxReadRatio, na.rm = TRUE)
# zooxHostProportions$zooxReadRatio <- log10(zooxHostProportions$zooxReadRatio)
# skewness(zooxHostProportions$zooxReadRatio, na.rm = TRUE)
#
# zooxDepthPlot=ggplot(zooxHostProportions, aes(x=depth, y=zooxReadRatio)) +
#   geom_point()+
#   geom_smooth(method = "lm")
#
# zooxDepthPlot
#
# leveneTest(zooxReadRatio ~ site*depthZone, data = zooxHostProportions)
# res.aov3 <- aov(zooxReadRatio ~ site * depthZone, data = zooxHostProportions)
# shapiro.test(zooxHostProportions$zooxReadRatio)
# residualplot=plot(res.aov3, 2)
# zooxAnova <- aov(zooxReadRatio ~ site * depthZone, data = zooxHostProportions)
# Anova(zooxAnova, type = "III")
#
#
# lsmeans = lsmeans::lsmeans ### Uses the lsmeans function
#                            ###  from the lsmeans package,
#                            ###  not from the lmerTest package
#
# leastsquare = lsmeans(zooxAnova,
#                       pairwise ~ site:depthZone,
#                       adjust="tukey")
#
#
# zooxBoxPlot=ggplot(zooxHostProportions, aes(x=site, y=zooxReadRatio, fill=depthZone)) +
#   geom_boxplot()
#
# zooxBoxPlot
#Zoox Plot
# dfZoox = read.csv("zooxCommunity.csv")
zoox = read.delim("zooxAlignmentOutput", header = FALSE, check.names = FALSE)
head(zoox)
zoox$V2[is.na(zoox$V2)] <- as.character(zoox$V1[is.na(zoox$V2)])
zoox$V1 = gsub(pattern = "fk.*", "chr", zoox$V1)
zoox$V2 = gsub(".trim.*", "", zoox$V2)
zoox = zoox %>% filter(zoox$V1 != "*")
zooxLst = split(zoox$V2, as.integer(gl(length(zoox$V2), 20, length(zoox$V2))))
zooxMaps = NULL
for(i in zooxLst){
zooxMaps = rbind(zooxMaps, data.frame(t(i)))
}
colnames(zooxMaps) = c("sample",zoox$V1[c(2:20)])
for(i in c(2:20)){
zooxMaps[,i] = as.numeric(levels(zooxMaps[,i]))[zooxMaps[,i]]
}
str(zooxMaps)
zooxMaps$Symbiodinium = rowSums(zooxMaps[2:6])
zooxMaps$Breviolum = rowSums(zooxMaps[7:10])
zooxMaps$Cladcopium = rowSums(zooxMaps[11:16])
zooxMaps$Durusdinium = rowSums(zooxMaps[17:20])
zooxMaps = zooxMaps[,c(1, 21:24)]
zooxProp = zooxMaps
zooxProp$sum = apply(zooxProp[, c(2:length(zooxProp[1,]))], 1, function(x) {
sum(x, na.rm = T)
})
zooxProp = cbind(zooxProp[, c(1)], (zooxProp[, c(2:(ncol(zooxProp)-1))]
/ zooxProp$sum))
head(zooxProp)
apply(zooxProp[, c(2:(ncol(zooxProp)))], 1, function(x) {
sum(x, na.rm = T)
})
dfZoox = cbind("Sample" = zooxProp[,1], "Population" = popData[,2], zooxProp[,c(2:5)])
dfZoox$Population=as.factor(dfZoox$Population)
dfZoox$Population = factor(dfZoox$Population, levels = levels(dfZoox$Population)[c(6,5,4,3,2,1,8,7)])
levels(dfZoox$Population) = c("DRTS-Shallow", "DRTS-Mesophotic", "DRTN-Shallow", "DRTN-Mesophotic", "LK-Shallow", "LK-Mesophotic", "UK-Shallow", "UK-Mesophotic")
dfZoox = dfZoox[order(dfZoox$Population),]
dfZoox$Order = c(1:nrow(dfZoox))
zDat = melt(dfZoox, id.vars = c("Sample", "Population", "Order"), variable.name = "Symbiont", value.name = "Fraction")
colPalZoox = brewer.pal(4, "BrBG")
names(colPalZoox) = levels(zDat$Symbiont)
zooxPlotA = ggplot(data = zDat, aes(x = Order, y = Fraction, fill = Symbiont, order = Order)) +
geom_bar(stat = "identity", position = "stack", colour = "grey25", width = 1) +
xlab("Population") +
scale_x_discrete(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0), labels = function(x) paste0(x*100, "%")) +
scale_fill_manual(values = colPalZoox, name = "Symbiodiniaceae genus") +
coord_cartesian(ylim = c(-.01,1.01)) +
facet_grid(.~fct_inorder(Population), drop=TRUE, scales = "free", switch = "x", space = "free") +
theme_bw()
zooxPlot = zooxPlotA + theme(plot.title = element_text(hjust = 0.5),
panel.grid=element_blank(),
panel.background=element_rect(fill=NA, colour="grey25"),
panel.spacing.x=grid:::unit(0, "lines"),
panel.border = element_rect(color="black", size=2, linetype="solid"),
axis.text.y=element_text(size=14),
axis.text.x = element_blank(),
axis.title.y = element_blank(),
axis.ticks.x=element_blank(),
strip.background=element_blank(),
strip.text=element_text(size=12, angle=90),
legend.key=element_blank(),
legend.position = "right",
#legend.title = element_blank(),
legend.text = element_text(face = "italic"))
zooxPlot
ggsave("../revisedFigures/zooxPlotb.tiff", plot = zooxPlot, width = 30, height = 15, units = "cm", dpi = 300)
