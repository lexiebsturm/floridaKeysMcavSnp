DistM = function(g1, g2) {
require("Imap")
return(ifelse(
g1$index > g2$index,
0,
gdist(lat.1 = g1$lat, lon.1 = g1$lon, lat.2 = g2$lat, lon.2 = g2$lon, units = "m")))
}
return(mapply(DistM, g1, g2))
}
n.geopoints = nrow(df.geopoints)
# The index column is used to ensure we only do calculations for the upper triangle of points
df.geopoints$index = 1:n.geopoints
# Create a list of lists
list.geopoints = by(df.geopoints[, c("index", "lat", "lon")], 1:n.geopoints, function(x) {
return(list(x))
})
# Get a matrix of distances (in metres)
mat.distances = ReplaceLowerOrUpperTriangle(outer(list.geopoints, list.geopoints, GeoDistanceInMetres), "lower")
# Set the row and column names
rownames(mat.distances) = df.geopoints$name
colnames(mat.distances) = df.geopoints$name
return(mat.distances)}
snpNeiDist = as.dist(stamppNeisD(fkGenlightPopDepth, pop = TRUE), diag = F)
snpNeiDist = as.dist(stamppNeisD(fkGenlightPopDepth, pop = TRUE), diag = F)
coords = read.csv("fkXYcoords.csv", header=TRUE) # tab-separated file for all pops
dGeo = as.dist(GeoDistanceInMetresMatrix(coords)/1000, diag = T)
dGeo
# Test IBD
set.seed(694)
snpIBD = mantel.randtest(dGeo,snpNeiDist)
snpIBD
snpNei =  melt(as.matrix(snpNeiDist), varnames = c("row", "col"), value.name = "nei")
snpNei
snpNei = snpNei[snpNei$row != snpNei$col,]
geo = melt(as.matrix(dGeo), varnames = c("row", "col"), value.name = "geo")
geo = geo[geo$row != geo$col,]
snpMantelDF = data.frame(cbind(snpNei$nei, geo$geo))
colnames(snpMantelDF) = c("nei", "geo")
snpMantelDF
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, fig.align = 'left')
knitr::opts_knit$set(root.dir = '../data')
options(width = 88, scipen = 4)
setwd("../data")
if (!require("pacman")) install.packages("pacman")
pacman::p_load("adegenet", "dendextend", "flextable", "ggdendro", "hierfstat", "Imap", "kableExtra", "paletteer", "patchwork", "officer", "poppr", "RColorBrewer", "reshape2", "StAMPP", "tidyverse", "vcfR", "vegan", "WGCNA")
ReplaceLowerOrUpperTriangle = function(m, triangle.to.replace) {
if (nrow(m) != ncol(m))
stop("Supplied matrix must be square.")
if (tolower(triangle.to.replace) == "lower")
tri = lower.tri(m)
else if (tolower(triangle.to.replace) == "upper")
tri = upper.tri(m)
else
stop("triangle.to.replace must be set to 'lower' or 'upper'.")
m[tri] = t(m)[tri]
return(m)
}
# If triangle.to.replace="lower", replaces the lower triangle of a square matrix with its upper triangle.
# If triangle.to.replace="upper", replaces the upper triangle of a square matrix with its lower triangle.
GeoDistanceInMetresMatrix = function(df.geopoints) {
# Returns a matrix (M) of distances between geographic points. M[i,j] = M[j,i] = Distance between (df.geopoints$lat[i], df.geopoints$lon[i]) and (df.geopoints$lat[j], df.geopoints$lon[j]). The row and column names are given by df.geopoints$name.
GeoDistanceInMetres = function(g1, g2) {
# Returns a vector of distances. (But if g1$index > g2$index, returns zero.) The 1st value in the returned vector is the distance between g1[[1]] and g2[[1]]. The 2nd value in the returned vector is the distance between g1[[2]] and g2[[2]]. Etc. Each g1[[x]] or g2[[x]] must be a list with named elements "index", "lat" and "lon". E.g. g1 = list(list("index"=1, "lat"=12.1, "lon"=10.1), list("index"=3, "lat"=12.1, "lon"=13.2))
DistM = function(g1, g2) {
require("Imap")
return(ifelse(
g1$index > g2$index,
0,
gdist(lat.1 = g1$lat, lon.1 = g1$lon, lat.2 = g2$lat, lon.2 = g2$lon, units = "m")))
}
return(mapply(DistM, g1, g2))
}
n.geopoints = nrow(df.geopoints)
# The index column is used to ensure we only do calculations for the upper triangle of points
df.geopoints$index = 1:n.geopoints
# Create a list of lists
list.geopoints = by(df.geopoints[, c("index", "lat", "lon")], 1:n.geopoints, function(x) {
return(list(x))
})
# Get a matrix of distances (in metres)
mat.distances = ReplaceLowerOrUpperTriangle(outer(list.geopoints, list.geopoints, GeoDistanceInMetres), "lower")
# Set the row and column names
rownames(mat.distances) = df.geopoints$name
colnames(mat.distances) = df.geopoints$name
return(mat.distances)}
coords = read.csv("xycoords.csv", header=TRUE) # tab-separated file for all pops
setwd("../data")
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, fig.align = 'left')
knitr::opts_knit$set(root.dir = '../data')
options(width = 88, scipen = 4)
getwd()
setwd("/Users/student/Documents/GitHub/cubaMcavMsatSnp/data")
getwd()
coords = read.csv("xycoords.csv", header=TRUE) # tab-separated file for all pops
dGeo = as.dist(GeoDistanceInMetresMatrix(coords)/1000, diag = T)
dGeo
msNeiDist = read.csv("neis-distance.csv", header=TRUE)
msNeiMa = as.matrix(msNeiDist)
msNeiDistMa = dist(msNeiMa, diag = FALSE)
# Test IBD
set.seed(694)
msIBD = mantel.randtest(dGeo, msNeiDistMa)
msIBD
msIBD
msNei =  melt(as.matrix(msNeiDistMa), varnames = c("row", "col"), value.name = "nei")
msNei = msNei[msNei$row > msNei$col,]
geo = melt(as.matrix(dGeo), varnames = c("row", "col"), value.name = "geo")
geo = geo[geo$row != geo$col,]
msMantelDF = data.frame(cbind(msNei$nei, geo$geo))
colnames(msMantelDF) = c("nei", "geo")
msMantelDF
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, fig.align = 'left')
knitr::opts_knit$set(root.dir = '../data')
options(width = 88, scipen = 4)
getwd()
setwd("/Users/student/Documents/GitHub/floridaKeysMcavSnp/data")
getwd()
if (!require("pacman")) install.packages("pacman")
pacman::p_load("adegenet", "dendextend", "flextable", "gdata", "ggdendro", "hierfstat", "Imap", "kableExtra", "paletteer", "patchwork", "officer", "poppr", "RColorBrewer", "reshape2", "StAMPP", "tidyverse", "vcfR", "vegan", "WGCNA")
dfZoox = read.csv("zooxCommunity.csv")
dfZoox$Order = c(1:nrow(dfZoox))
zDat = melt(dfZoox, id.vars = c("sample", "population", "Order"), variable.name = "Symbiont", value.name = "Fraction")
zDat
zDat = melt(dfZoox, id.vars = c("Sample", "Population", "Order"), variable.name = "Symbiont", value.name = "Fraction")
dfZoox = read.csv("zooxCommunity.csv")
dfZoox$Order = c(1:nrow(dfZoox))
zDat = melt(dfZoox, id.vars = c("Sample", "Population", "Order"), variable.name = "Symbiont", value.name = "Fraction")
colPalZoox = brewer.pal(4, "BrBG")
names(colPalZoox) = levels(zDat$Symbiont)
zooxPlotA = ggplot(data = zDat, aes(x = Order, y = Fraction, fill = Symbiont, order = Order)) +
geom_bar(stat = "identity", position = "fill", width = 1, colour = "grey25") +
xlab("Population") +
scale_x_discrete(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0), labels = function(x) paste0(x*100, "%")) +
scale_fill_manual(values = colPalZoox, name = "Symbiodiniaceae genus") +
scale_color_brewer(palette = "Dark2") +
facet_grid(.~fct_inorder(Population), scales = "free", switch = "x", space = "free") +
coord_cartesian(ylim = c(-.01,1.01), clip = "off") +
guides(color = FALSE) +
theme_bw()
zooxPlot = zooxPlotA + theme(
plot.title = element_blank(),
panel.background = element_blank(),
panel.spacing.x = grid:::unit(0, "lines"),
panel.border = element_rect(color = "black", size = 2, linetype = "solid"),
axis.text.x=element_blank(),
axis.text.y=element_text(size = 12, color = "black"),
axis.title.x=element_text(size = 16),
axis.title.y = element_blank(),
axis.ticks.x=element_blank(),
axis.ticks.y = element_line(color = "black"),
strip.text=element_text(size = 16, angle = 90, hjust = 1, vjust = 0, color = NA),
strip.background = element_blank(),
legend.text = element_text(face = "italic"))
zooxPlot
zooxPlot
dfZoox = read.csv("zooxCommunity.csv")
dfZoox
dfZoox$Order = c(1:nrow(dfZoox))
dfZoox
zDat = melt(dfZoox, id.vars = c("Sample", "Population", "Order"), variable.name = "Symbiont", value.name = "Fraction")
colPalZoox = brewer.pal(4, "BrBG")
names(colPalZoox) = levels(zDat$Symbiont)
zooxPlotA = ggplot(data = zDat, aes(x = Order, y = Fraction, fill = Symbiont, order = Order)) +
geom_bar(stat = "identity", position = "fill", width = 1, colour = "grey25") +
xlab("Population") +
scale_x_discrete(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0), labels = function(x) paste0(x*100, "%")) +
scale_fill_manual(values = colPalZoox, name = "Symbiodiniaceae genus") +
scale_color_brewer(palette = "Dark2") +
facet_grid(.~fct_inorder(Population), scales = "free", switch = "x", space = "free") +
coord_cartesian(ylim = c(-.01,1.01), clip = "off") +
guides(color = FALSE) +
theme_bw()
zooxPlot = zooxPlotA + theme(
plot.title = element_blank(),
panel.background = element_blank(),
panel.spacing.x = grid:::unit(0, "lines"),
panel.border = element_rect(color = "black", size = 2, linetype = "solid"),
axis.text.x=element_blank(),
axis.text.y=element_text(size = 12, color = "black"),
axis.title.x=element_text(size = 16),
axis.title.y = element_blank(),
axis.ticks.x=element_blank(),
axis.ticks.y = element_line(color = "black"),
strip.text=element_text(size = 16, angle = 90, hjust = 1, vjust = 0, color = NA),
strip.background = element_blank(),
legend.text = element_text(face = "italic"))
zooxPlot
zooxPlotA = ggplot(data = zDat, aes(x = Order, y = Fraction, fill = Symbiont, order = Order)) +
geom_bar(stat = "identity", position = "fill", width = 1, colour = "grey25") +
xlab("Population") +
#scale_x_discrete(expand = c(0, 0)) +
#scale_y_continuous(expand = c(0, 0), labels = function(x) paste0(x*100, "%")) +
scale_fill_manual(values = colPalZoox, name = "Symbiodiniaceae genus") +
scale_color_brewer(palette = "Dark2") +
facet_grid(.~fct_inorder(Population), scales = "free", switch = "x", space = "free") +
coord_cartesian(ylim = c(-.01,1.01), clip = "off") +
guides(color = FALSE) +
theme_bw()
zooxPlot = zooxPlotA + theme(
plot.title = element_blank(),
panel.background = element_blank(),
panel.spacing.x = grid:::unit(0, "lines"),
panel.border = element_rect(color = "black", size = 2, linetype = "solid"),
axis.text.x=element_blank(),
axis.text.y=element_text(size = 12, color = "black"),
axis.title.x=element_text(size = 16),
axis.title.y = element_blank(),
axis.ticks.x=element_blank(),
axis.ticks.y = element_line(color = "black"),
strip.text=element_text(size = 16, angle = 90, hjust = 1, vjust = 0, color = NA),
strip.background = element_blank(),
legend.text = element_text(face = "italic"))
zooxPlot
zooxPlot
zooxPlotA = ggplot(data = zDat, aes(x = Order, y = Fraction, fill = Symbiont, order = Order)) +
geom_bar(stat = "identity", position = "fill", width = 1, colour = "grey25") +
xlab("Population") +
scale_x_discrete(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0), labels = function(x) paste0(x*100, "%")) +
scale_fill_manual(values = colPalZoox, name = "Symbiodiniaceae genus") +
scale_color_brewer(palette = "Dark2") +
facet_grid(.~fct_inorder(Population), scales = "free", switch = "x", space = "free") +
#coord_cartesian(ylim = c(-.01,1.01), clip = "off") +
guides(color = FALSE) +
theme_bw()
zooxPlot = zooxPlotA + theme(
plot.title = element_blank(),
panel.background = element_blank(),
panel.spacing.x = grid:::unit(0, "lines"),
panel.border = element_rect(color = "black", size = 2, linetype = "solid"),
axis.text.x=element_blank(),
axis.text.y=element_text(size = 12, color = "black"),
axis.title.x=element_text(size = 16),
axis.title.y = element_blank(),
axis.ticks.x=element_blank(),
axis.ticks.y = element_line(color = "black"),
strip.text=element_text(size = 16, angle = 90, hjust = 1, vjust = 0, color = NA),
strip.background = element_blank(),
legend.text = element_text(face = "italic"))
zooxPlot
zooxPlot
zDat = melt(dfZoox, id.vars = c("Sample", "Population", "Order"), variable.name = "Symbiont", value.name = "Fraction")
colPalZoox = brewer.pal(4, "BrBG")
names(colPalZoox) = levels(zDat$Symbiont)
zooxPlotA = ggplot(data = zDat, aes(x = Order, y = Fraction, fill = Symbiont, order = Order)) +
geom_bar(stat = "identity", position = "fill", width = 1, colour = "grey25") +
xlab("Population") +
scale_x_discrete(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0), labels = function(x) paste0(x*100, "%")) +
scale_fill_manual(values = colPalZoox, name = "Symbiodiniaceae genus") +
scale_color_brewer(palette = "Dark2") +
facet_grid(.~fct_inorder(Population), scales = "free", switch = "x", space = "free") +
#coord_cartesian(ylim = c(-.01,1.01), clip = "off") +
guides(color = FALSE) +
theme_bw()
zooxPlot = zooxPlotA + theme(
plot.title = element_blank(),
panel.background = element_blank(),
panel.spacing.x = grid:::unit(0, "lines"),
panel.border = element_rect(color = "black", size = 2, linetype = "solid"),
axis.text.x=element_blank(),
axis.text.y=element_text(size = 12, color = "black"),
axis.title.x=element_text(size = 16),
axis.title.y = element_blank(),
axis.ticks.x=element_blank(),
axis.ticks.y = element_line(color = "black"),
#strip.text=element_text(size = 16, angle = 90, hjust = 1, vjust = 0, color = NA),
#strip.background = element_blank(),
legend.text = element_text(face = "italic"))
zooxPlot
zooxPlot
zDat = melt(dfZoox, id.vars = c("Sample", "Population", "Order"), variable.name = "Symbiont", value.name = "Fraction")
colPalZoox = brewer.pal(4, "BrBG")
names(colPalZoox) = levels(zDat$Symbiont)
zooxPlotA = ggplot(data = zDat, aes(x = Order, y = Fraction, fill = Symbiont, order = Order)) +
geom_bar(stat = "identity", position = "fill", width = 1, colour = "grey25") +
xlab("Population") +
scale_x_discrete(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0), labels = function(x) paste0(x*100, "%")) +
scale_fill_manual(values = colPalZoox, name = "Symbiodiniaceae genus") +
facet_grid(.~fct_inorder(Population), scales = "free", switch = "x", space = "free") +
theme_bw()
zooxPlot = zooxPlotA + theme(
plot.title = element_blank(),
panel.background = element_blank(),
panel.spacing.x = grid:::unit(0, "lines"),
panel.border = element_rect(color = "black", size = 2, linetype = "solid"),
axis.text.x=element_blank(),
axis.text.y=element_text(size = 12, color = "black"),
axis.title.x=element_text(size = 16),
axis.title.y = element_blank(),
axis.ticks.x=element_blank(),
axis.ticks.y = element_line(color = "black"),
#strip.text=element_text(size = 16, angle = 90, hjust = 1, vjust = 0, color = NA),
#strip.background = element_blank(),
legend.text = element_text(face = "italic"))
zooxPlot
zooxPlot
dfZoox = read.csv("zooxCommunity.csv")
dfZoox$Order = c(1:nrow(dfZoox))
zDat = melt(dfZoox, id.vars = c("Sample", "Population", "Order"), variable.name = "Symbiont", value.name = "Fraction")
colPalZoox = brewer.pal(4, "BrBG")
names(colPalZoox) = levels(zDat$Symbiont)
zooxPlotA = ggplot(data = zDat, aes(x = Order, y = Fraction, fill = Symbiont, order = Order)) +
geom_bar(stat = "identity", position = "fill", width = 1, colour = "grey25") +
xlab("Population") +
scale_x_discrete(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0), labels = function(x) paste0(x*100, "%")) +
scale_fill_manual(values = colPalZoox, name = "Symbiodiniaceae genus") +
facet_grid(.~fct_inorder(Population), scales = "free", switch = "x", space = "free") +
theme_bw()
zooxPlot = zooxPlotA + theme(
plot.title = element_blank(),
panel.background = element_blank(),
#panel.spacing.x = grid:::unit(0, "lines"),
panel.border = element_rect(color = "black", size = 2, linetype = "solid"),
axis.text.x=element_blank(),
axis.text.y=element_text(size = 12, color = "black"),
axis.title.x=element_text(size = 16),
axis.title.y = element_blank(),
axis.ticks.x=element_blank(),
axis.ticks.y = element_line(color = "black"),
strip.text=element_text(size = 16, angle = 90, hjust = 1, vjust = 0, color = NA),
strip.background = element_blank(),
legend.text = element_text(face = "italic"))
zooxPlot
zooxPlot
colPalZoox
zooxPlotA = ggplot(data = zDat, aes(x = Sample, y = Fraction, fill = Symbiont, order = Order)) +
geom_bar(stat = "identity", position = "fill", width = 1, colour = "grey25") +
xlab("Population") +
scale_x_discrete(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0), labels = function(x) paste0(x*100, "%")) +
scale_fill_manual(values = colPalZoox, name = "Symbiodiniaceae genus") +
facet_grid(.~fct_inorder(Population), scales = "free", switch = "x", space = "free") +
theme_bw()
zooxPlot = zooxPlotA + theme(
plot.title = element_blank(),
panel.background = element_blank(),
#panel.spacing.x = grid:::unit(0, "lines"),
panel.border = element_rect(color = "black", size = 2, linetype = "solid"),
axis.text.x=element_blank(),
axis.text.y=element_text(size = 12, color = "black"),
axis.title.x=element_text(size = 16),
axis.title.y = element_blank(),
axis.ticks.x=element_blank(),
axis.ticks.y = element_line(color = "black"),
strip.text=element_text(size = 16, angle = 90, hjust = 1, vjust = 0, color = NA),
strip.background = element_blank(),
legend.text = element_text(face = "italic"))
zooxPlot
zooxPlot
dfZoox = read.csv("zooxCommunity.csv")
dfZoox$Order = c(1:nrow(dfZoox))
zDat = melt(dfZoox, id.vars = c("Sample", "Population", "Order"), variable.name = "Symbiont", value.name = "Fraction")
colPalZoox = brewer.pal(4, "BrBG")
names(colPalZoox) = levels(zDat$Symbiont)
zooxPlotA = ggplot(data = zDat, aes(x = Order, y = Fraction, fill = Symbiont, order = Order)) +
geom_bar(stat = "identity", position = "fill", width = 1, colour = "grey25") +
xlab("Population") +
scale_x_discrete(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0), labels = function(x) paste0(x*100, "%")) +
scale_fill_manual(values = colPalZoox, name = "Symbiodiniaceae genus") +
facet_grid(.~fct_inorder(Population), scales = "free", switch = "x", space = "free") +
theme_bw()
zooxPlot = zooxPlotA + theme(
plot.title = element_blank(),
panel.background = element_blank(),
#panel.spacing.x = grid:::unit(0, "lines"),
panel.border = element_rect(color = "black", size = 2, linetype = "solid"),
axis.text.x=element_blank(),
axis.text.y=element_text(size = 12, color = "black"),
axis.title.x=element_text(size = 16),
axis.title.y = element_blank(),
axis.ticks.x=element_blank(),
axis.ticks.y = element_line(color = "black"),
strip.text=element_text(size = 16, angle = 90, hjust = 1, vjust = 0, color = NA),
strip.background = element_blank(),
legend.text = element_text(face = "italic"))
zooxPlot
zooxPlot
zooxPlot
zDat
tail(zDat)
zooxPlotA = ggplot(data = zDat, aes(x = Order, y = Fraction, fill = Symbiont, order = Order)) +
geom_bar(stat = "identity", position = "fill", width = 1, colour = "grey25") +
xlab("Population") +
scale_x_discrete(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0), labels = function(x) paste0(x*100, "%")) +
scale_fill_manual(values = colPalZoox, name = "Symbiodiniaceae genus") +
facet_grid(.~fct_inorder(Population), scales = "free", switch = "x", space = "free", drop=TRUE) +
theme_bw()
zooxPlot = zooxPlotA + theme(
plot.title = element_blank(),
panel.background = element_blank(),
#panel.spacing.x = grid:::unit(0, "lines"),
panel.border = element_rect(color = "black", size = 2, linetype = "solid"),
axis.text.x=element_blank(),
axis.text.y=element_text(size = 12, color = "black"),
axis.title.x=element_text(size = 16),
axis.title.y = element_blank(),
axis.ticks.x=element_blank(),
axis.ticks.y = element_line(color = "black"),
strip.text=element_text(size = 16, angle = 90, hjust = 1, vjust = 0, color = NA),
strip.background = element_blank(),
legend.text = element_text(face = "italic"))
zooxPlot
zooxPlot
zDat = melt(dfZoox, id.vars = c("Sample", "Population", "Order"), variable.name = "Symbiont", value.name = "Fraction")
colPalZoox = brewer.pal(4, "BrBG")
names(colPalZoox) = levels(zDat$Symbiont)
zooxPlotA = ggplot(data = zDat, aes(x = Order, y = Fraction, fill = Symbiont, order = Order)) +
geom_bar(stat = "identity", position = "fill", width = 1, colour = "grey25") +
xlab("Population") +
scale_x_discrete(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0), labels = function(x) paste0(x*100, "%")) +
scale_fill_manual(values = colPalZoox, name = "Symbiodiniaceae genus") +
facet_grid(~fct_inorder(Population), scales = "free", switch = "x", space = "free", drop=TRUE) +
theme_bw()
zooxPlot = zooxPlotA + theme(
plot.title = element_blank(),
panel.background = element_blank(),
panel.spacing.x = grid:::unit(0, "lines"),
panel.border = element_rect(color = "black", size = 2, linetype = "solid"),
axis.text.x=element_blank(),
axis.text.y=element_text(size = 12, color = "black"),
axis.title.x=element_text(size = 16),
axis.title.y = element_blank(),
axis.ticks.x=element_blank(),
axis.ticks.y = element_line(color = "black"),
strip.text=element_text(size = 16, angle = 90, hjust = 1, vjust = 0, color = NA),
strip.background = element_blank(),
legend.text = element_text(face = "italic"))
zooxPlot
zooxPlot
zooxPlotA = ggplot(data = zDat, aes(x = Order, y = Fraction, fill = Symbiont, order = Order)) +
geom_bar(stat = "identity", position = "fill", width = 1, colour = "grey25") +
xlab("Population") +
scale_x_discrete(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0), labels = function(x) paste0(x*100, "%")) +
scale_fill_manual(values = colPalZoox, name = "Symbiodiniaceae genus") +
facet_grid(~Population, scales = "free", switch = "x", space = "free", drop=TRUE) +
theme_bw()
zooxPlot = zooxPlotA + theme(
plot.title = element_blank(),
panel.background = element_blank(),
panel.spacing.x = grid:::unit(0, "lines"),
panel.border = element_rect(color = "black", size = 2, linetype = "solid"),
axis.text.x=element_blank(),
axis.text.y=element_text(size = 12, color = "black"),
axis.title.x=element_text(size = 16),
axis.title.y = element_blank(),
axis.ticks.x=element_blank(),
axis.ticks.y = element_line(color = "black"),
strip.text=element_text(size = 16, angle = 90, hjust = 1, vjust = 0, color = NA),
strip.background = element_blank(),
legend.text = element_text(face = "italic"))
zooxPlot
zooxPlot
zDat = melt(dfZoox, id.vars = c("Sample", "Population", "Order"), variable.name = "Symbiont", value.name = "Fraction")
colPalZoox = brewer.pal(4, "BrBG")
names(colPalZoox) = levels(zDat$Symbiont)
zooxPlotA = ggplot(data = zDat, aes(x = Order, y = Fraction, fill = Symbiont, order = Order)) +
geom_bar(stat = "identity", position = "fill", width = 1, colour = "grey25") +
xlab("Population") +
scale_x_discrete(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0), labels = function(x) paste0(x*100, "%")) +
scale_fill_manual(values = colPalZoox, name = "Symbiodiniaceae genus") +
facet_grid(.~fct_inorder(Population), scales = "free", switch = "x", space = "free") +
theme_bw()
zooxPlot = zooxPlotA + theme(
plot.title = element_blank(),
panel.background = element_blank(),
panel.spacing.x = grid:::unit(0, "lines"),
panel.border = element_rect(color = "black", size = 2, linetype = "solid"),
axis.text.x=element_blank(),
axis.text.y=element_text(size = 12, color = "black"),
axis.title.x=element_text(size = 16),
axis.title.y = element_blank(),
axis.ticks.x=element_blank(),
axis.ticks.y = element_line(color = "black"),
strip.text=element_text(size = 16, angle = 90, hjust = 1, vjust = 0, color = NA),
strip.background = element_blank(),
legend.text = element_text(face = "italic"))
zooxPlot
zooxPlot
zooxPlotA = ggplot(data = zDat, aes(x = Order, y = Fraction, fill = Symbiont, order = Order)) +
geom_bar(stat = "identity", position = "fill", colour = "grey25") +
xlab("Population") +
scale_x_discrete(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0), labels = function(x) paste0(x*100, "%")) +
scale_fill_manual(values = colPalZoox, name = "Symbiodiniaceae genus") +
facet_grid(.~fct_inorder(Population), scales = "free", switch = "x", space = "free") +
theme_bw()
zooxPlot = zooxPlotA + theme(
plot.title = element_blank(),
panel.background = element_blank(),
panel.spacing.x = grid:::unit(0, "lines"),
panel.border = element_rect(color = "black", size = 2, linetype = "solid"),
axis.text.x=element_blank(),
axis.text.y=element_text(size = 12, color = "black"),
axis.title.x=element_text(size = 16),
axis.title.y = element_blank(),
axis.ticks.x=element_blank(),
axis.ticks.y = element_line(color = "black"),
strip.text=element_text(size = 16, angle = 90, hjust = 1, vjust = 0, color = NA),
strip.background = element_blank(),
legend.text = element_text(face = "italic"))
zooxPlot
zooxPlot
