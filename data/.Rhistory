amova <- poppr.amova(fkGenlightPopDepth, ~popdepth) #Runs AMOVA
amova
set.seed(1999)
amovasignif   <- randtest(amova, nrepet = 99) #Calculates significance levels of the AMOVA with 999 permutations
amovasignif
amovasignif$pvalue
amovasignif <- randtest(amova, nrepet = 999) #Calculates significance levels of the AMOVA with 999 permutations
amovasignif <- randtest(amova, nrepet = 99) #Calculates significance levels of the AMOVA with 99 permutations
amovasignif
set.seed(694)
fk.fst <- stamppFst(fkGenlightPopDepth, nboots = 99, percent = 95, nclusters = 4) #99 permutations
fk.fst$Fsts
fk.fst$Pvalues
fkGenlightPopDepth
fkGenlightPopDepth$pop
# reads in fst matrix
snpFstMa = as.data.frame(fk.fst$Fsts)
snpFstMa
snpFstMa
fkGenlightPopDepth
fkGenlightPopDepth$population
fkGenlightPopDepth$pop
levels(fkGenlightPopDepth$pop)
fkGenlightPopDepth$pop = factor(fkGenlightPopDepth$pop, levels(fkGenlightPopDepth$pop)[c(4,3,2,1,5,6,8,7)])
set.seed(694)
fk.fst <- stamppFst(fkGenlightPopDepth, nboots = 99, percent = 95, nclusters = 4) #99 permutations
fk.fst <- stamppFst(fkGenlightPopDepth, nboots = 99, percent = 95, nclusters = 4) #99 permutations
fk.fst$Fsts
test = as.matrix(fk.fst)
test
fk.fst
test = as.matrix(fk.fst$Fsts)
test
?as.matrix
Matrix::forceSymmetric(test,uplo="L")
col.order <- c("TER-South-Shallow", "TER-South-Mesophotic",  "TER-North-Shallow", "TER-North-Mesophotic", "Lower Keys-Shallow", "Lower Keys-Mesophotic", "Upper Keys-Shallow", "Upper Keys-Mesophotic")
test[,col.order]
test = as.matrix(fk.fst$Fsts)
test = Matrix::forceSymmetric(test,uplo="L")
col.order <- c("TER-South-Shallow", "TER-South-Mesophotic",  "TER-North-Shallow", "TER-North-Mesophotic", "Lower Keys-Shallow", "Lower Keys-Mesophotic", "Upper Keys-Shallow", "Upper Keys-Mesophotic")
test = test[,col.order]
test = test[col.order,]
test
test = as.matrix(fk.fst$Fsts) %>%
Matrix::forceSymmetric(test,uplo="L") %>%
.[,col.order] %>%
.[col.order,]
test = as.matrix(fk.fst$Fsts) %>%
Matrix::forceSymmetric(.,uplo="L") %>%
.[,col.order] %>%
.[col.order,]
test
test = as.matrix(fk.fst$Fsts) %>%
Matrix::forceSymmetric(.,uplo="L") %>%
.[,col.order] %>%
.[col.order,] %>%
lower.tri()
test
test = as.matrix(fk.fst$Fsts) %>%
Matrix::forceSymmetric(.,uplo="L") %>%
.[,col.order] %>%
.[col.order,] %>%
lower.tri(.)
test
test = as.matrix(fk.fst$Fsts) %>%
Matrix::forceSymmetric(.,uplo="L") %>%
.[,col.order] %>%
.[col.order,] %>%
lower.triangle(.)
test = as.matrix(fk.fst$Fsts) %>%
Matrix::forceSymmetric(.,uplo="L") %>%
.[,col.order] %>%
.[col.order,] %>%
tril(.)
test = as.matrix(fk.fst$Fsts) %>%
Matrix::forceSymmetric(.,uplo="L") %>%
.[,col.order] %>%
.[col.order,] %>%
Matrix::tril(.)
test
test = as.matrix(fk.fst$Fsts) %>%
Matrix::forceSymmetric(.,uplo="L") %>%
.[,col.order] %>%
.[col.order,] %>%
Matrix::tril()
test
?tril
test = as.matrix(fk.fst$Fsts) %>%
Matrix::forceSymmetric(.,uplo="L") %>%
.[,col.order] %>%
.[col.order,] %>%
Matrix::tril() %>%
as.data.frame()%>%
.[.==.] <- NA
test = as.matrix(fk.fst$Fsts) %>%
Matrix::forceSymmetric(.,uplo="L") %>%
.[,col.order] %>%
.[col.order,] %>%
Matrix::tril() %>%
as.data.frame()%>%
.[==.] <- NA
test = as.matrix(fk.fst$Fsts) %>%
Matrix::forceSymmetric(.,uplo="L") %>%
.[,col.order] %>%
.[col.order,] %>%
Matrix::tril() %>%
as.data.frame()%>%
.[test==.] <- NA
test[test==.] <- NA
test = as.matrix(fk.fst$Fsts) %>%
Matrix::forceSymmetric(.,uplo="L") %>%
.[,col.order] %>%
.[col.order,] %>%
Matrix::tril() %>%
as.data.frame()
test = as.matrix(fk.fst$Fsts) %>%
Matrix::forceSymmetric(.,uplo="L") %>%
.[,col.order] %>%
.[col.order,] %>%
Matrix::tril()
test[test==.] <- NA
test
as.data.frame(test)
test = as.matrix(fk.fst$Fsts) %>%
Matrix::forceSymmetric(.,uplo="L") %>%
.[,col.order] %>%
.[col.order,]
test
lower.tri(test, diag = T)
lower.tri(test, diag = F)
upper.tri(test, diag = F)
test[upper.tri(test)] <- NA
test
as.data.frame(test)
test = as.matrix(fk.fst$Fsts) %>%
Matrix::forceSymmetric(fk.fst$Fsts,uplo="L") %>%
.[,col.order] %>%
.[col.order,]
test = as.matrix(fk.fst$Fsts) %>%
Matrix::forceSymmetric(fk.fst$Fsts,uplo="L") %>%
.[,col.order] %>%
.[col.order,]
test = as.matrix(fk.fst$Fsts) %>%
Matrix::forceSymmetric(fk.fst$Fsts,uplo="L") %>%
.[,col.order] %>%
.[col.order,]
Matrix::forceSymmetric(fk.fst$Fsts,uplo="L") %>%
.[,col.order] %>%
.[col.order,]
upper.tri(test, diag = F)
test[upper.tri(test)] <- NA
test
as.data.frame(test)
test
# reads in fst matrix
snpFstMa = as.data.frame(fk.fst$Fsts)
# reads in fst matrix
snpFstMa = as.data.frame(test)
test = as.matrix(fk.fst$Fsts) %>%
.[lower.tri(.)] = t(.)[lower.tri(.)]
test = as.matrix(fk.fst$Fsts) %>%
.[lower.tri(.)] = t(.)[lower.tri(.)] %>%
.[,col.order] %>%
.[col.order,]
test = as.matrix(fk.fst$Fsts)
test = as.matrix(fk.fst$Fsts) %>%
test[upper.tri(test)] = t(.)[lower.tri(.)] %>%
.[,col.order] %>%
.[col.order,]
test = as.matrix(fk.fst$Fsts) %>%
.[upper.tri(test)] = t(.)[lower.tri(.)] %>%
.[,col.order] %>%
.[col.order,]
test = as.matrix(fk.fst$Fsts)
test = test[upper.tri(test)] = t(test)[lower.tri(test)] %>%
.[,col.order] %>%
.[col.order,]
test = test[upper.tri(test)] = t(test)[lower.tri(test)]
test
test = as.matrix(fk.fst$Fsts)
test
test[upper.tri(test)] = t(test)[lower.tri(test)]
test = test[upper.tri(test)] = t(test)[lower.tri(test)]
test
test = as.matrix(fk.fst$Fsts)
test = test[lower.tri(test)] = t(test)[lower.tri(test)]
test
test = as.matrix(fk.fst$Fsts)
upper.tri(test)
upper.tri(test) <- test[lower.tri(test)]
upper.tri(test) <- lower.tri(test)
upper.tri(test) = lower.tri(test)
upper.tri(test) =
p
?matrix
upper.tri(test) = lower.tri(test)
test = as.matrix(fk.fst$Fsts)%>%
make.symmetric(lower.tri = TRUE)
library(fifer)
install.packages(fifer)
install.packages("fifer")
test = as.matrix(fk.fst$Fsts)%>%
lowerTriangle(., byrow=TRUE) <- upperTriangle(.)
install.packages("gdata")
install.packages("gdata")
install.packages("gdata")
library(gdata)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, fig.align = 'left')
knitr::opts_knit$set(root.dir = '../data')
options(width = 88, scipen = 4)
test = as.matrix(fk.fst$Fsts)%>%
lowerTriangle(., byrow=TRUE) <- upperTriangle(.)
test = as.matrix(fk.fst$Fsts)%>%
lowerTriangle(., byrow=TRUE) <- upperTriangle(.)
fk.fst$Fsts
if (!require("pacman")) install.packages("pacman")
pacman::p_load("adegenet", "dendextend", "flextable", "ggdendro", "hierfstat", "Imap", "kableExtra", "paletteer", "patchwork", "officer", "poppr", "RColorBrewer", "reshape2", "StAMPP", "tidyverse", "vcfR", "vegan", "WGCNA")
test = as.matrix(fk.fst$Fsts)%>%
lowerTriangle(., byrow=TRUE) <- upperTriangle(.)
test = as.matrix(fk.fst$Fsts)
lowerTriangle(test, byrow=TRUE) <- upperTriangle(test)
test = lowerTriangle(test, byrow=TRUE) <- upperTriangle(test)
test
test = as.matrix(fk.fst$Fsts)
test
lowerTriangle(test, byrow=TRUE) <- upperTriangle(test)
test
test = as.matrix(fk.fst$Fsts) %>%
uppererTriangle(test, byrow=TRUE) <- lowerTriangle(test)
test = as.matrix(fk.fst$Fsts)
test
uppererTriangle(test, byrow=TRUE) <- lowerTriangle(test)
upperTriangle(test, byrow=TRUE) <- lowerTriangle(test)
test
test[,col.order] %>%
.[col.order,]
test
pop.order <- c("TER-South-Shallow", "TER-South-Mesophotic",  "TER-North-Shallow", "TER-North-Mesophotic", "Lower Keys-Shallow", "Lower Keys-Mesophotic", "Upper Keys-Shallow", "Upper Keys-Mesophotic")
test = as.matrix(fk.fst$Fsts)
upperTriangle(test, byrow=TRUE) <- lowerTriangle(test)
test[,pop.order] %>%
.[pop.order,]
test
test = test[,pop.order] %>%
.[pop.order,]
test = as.matrix(fk.fst$Fsts)
upperTriangle(test, byrow=TRUE) <- lowerTriangle(test)
test = test[,pop.order] %>%
.[pop.order,] %>%
as.data.frame(test)
test
test
test = as.matrix(fk.fst$Fsts)
upperTriangle(test, byrow=TRUE) <- lowerTriangle(test)
test = test[,pop.order] %>%
.[pop.order,]
upperTriangle(test, byrow=TRUE)
upperTriangle(test) <- lowerTriangle(test)
test
upperTriangle(test)
upper.tri(test)
test = test[,pop.order] %>%
.[pop.order,] %>%
.[upper.tri(.)] <- NA
test = as.matrix(fk.fst$Fsts)
upperTriangle(test, byrow=TRUE) <- lowerTriangle(test)
test = test[,pop.order] %>%
.[pop.order,]
test[upper.tri(test)] <- NA
test
as.data.frame(test)
test
test = as.matrix(fk.fst$Fsts)
upperTriangle(test, byrow=TRUE) <- lowerTriangle(test)
test = test[,pop.order] %>%
.[pop.order,]
test[upper.tri(test)] <- NA %>%
as.data.frame(test)
test
test = as.matrix(fk.fst$Fsts)
upperTriangle(test, byrow=TRUE) <- lowerTriangle(test)
test = test[,pop.order] %>%
.[pop.order,]
test[upper.tri(test)] <- NA
as.data.frame(test)
test
# reads in fst matrix
snpFstMa = as.matrix(fk.fst$Fsts)
upperTriangle(snpFstMa, byrow=TRUE) <- lowerTriangle(snpFstMa)
snpFstMa = snpFstMa[,pop.order] %>%
.[pop.order,]
snpFstMa[upper.tri(snpFstMa)] <- NA
as.data.frame(snpFstMa)
snpFst = melt(snpFstMa, id.vars = "Pop", value.name = "Fst", variable.name = "Pop2", na.rm = TRUE)
snpFst = snpFst[snpFst$Pop != snpFst$Pop2,]
snpFst$Fst = round(snpFst$Fst, 3)
snpFst = snpFst %>% mutate(Fst = replace(Fst, Fst < 0, 0))
head(snpFst)
head(snpFst)
snpFst
snpFst
# reads in fst matrix
snpFstMa -> as.matrix(fk.fst$Fsts)
upperTriangle(snpFstMa, byrow=TRUE) <- lowerTriangle(snpFstMa)
# reads in fst matrix
snpFstMa -> as.matrix(fk.fst$Fsts)
# reads in fst matrix
snpFstMa <- as.matrix(fk.fst$Fsts)
upperTriangle(snpFstMa, byrow=TRUE) <- lowerTriangle(snpFstMa)
snpFstMa <- snpFstMa[,pop.order] %>%
.[pop.order,]
snpFstMa[upper.tri(snpFstMa)] <- NA
snpFstMa <- as.data.frame(snpFstMa)
snpFst = melt(snpFstMa, id.vars = "Pop", value.name = "Fst", variable.name = "Pop2", na.rm = TRUE)
snpFstMa
snpFstMa
# snpFstMa = as.data.frame(fk.fst$Fsts)
# names(snpFstMa) = pops
# row.names(snpFstMa) = pops
#
snpFstMa$Pop = factor(row.names(snpFstMa), levels = unique(pops))
names(snpFstMa) = pops
# reads in fst matrix
snpFstMa <- as.matrix(fk.fst$Fsts)
upperTriangle(snpFstMa, byrow=TRUE) <- lowerTriangle(snpFstMa)
snpFstMa <- snpFstMa[,pop.order] %>%
.[pop.order,]
snpFstMa[upper.tri(snpFstMa)] <- NA
snpFstMa <- as.data.frame(snpFstMa)
snpFstMa$Pop = factor(row.names(snpFstMa), levels = unique(pop.order))
snpFst = melt(snpFstMa, id.vars = "Pop", value.name = "Fst", variable.name = "Pop2", na.rm = TRUE)
snpFst = snpFst[snpFst$Pop != snpFst$Pop2,]
snpFst$Fst = round(snpFst$Fst, 3)
snpFst = snpFst %>% mutate(Fst = replace(Fst, Fst < 0, 0))
head(snpFst)
head(snpFst)
snpQMa <- as.matrix(fk.fst$Pvalues)
upperTriangle(snpQMa, byrow=TRUE) <- lowerTriangle(snpQMa)
snpQMa <- snpQMa[,pop.order] %>%
.[pop.order,]
snpQMa[upper.tri(snpQMa)] <- NA
snpQMa <- as.data.frame(snpQMa)
snpFstMa$Pop = factor(row.names(snpFstMa), levels = unique(pop.order))
snpFst = melt(snpFstMa, id.vars = "Pop", value.name = "Fst", variable.name = "Pop2", na.rm = TRUE)
snpFst = snpFst[snpFst$Pop != snpFst$Pop2,]
snpFst$Fst = round(snpFst$Fst, 3)
snpFst = snpFst %>% mutate(Fst = replace(Fst, Fst < 0, 0))
head(snpFst)
snpQ = melt(snpQMa, id.vars = "Pop", value.name = "Pval", variable.name = "Pop2", na.rm = TRUE)
snpQMa$Pop = factor(row.names(snpQMa), levels = unique(pop.order))
snpQ = melt(snpQMa, id.vars = "Pop", value.name = "Pval", variable.name = "Pop2", na.rm = TRUE)
snpQ = snpQ[snpQ$Pop != snpQ$Pop2,]
snpQ$Qval = p.adjust(snpQ$Pval, method = "BH")
head(snpQ
)
head(snpQ)
snpHeatmapA = ggplot(data = snpFst, aes(Pop, Pop2, fill = Fst))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "white", high = "red", midpoint = 0, limit = c(0, 0.1),
space = "Lab", name = expression(paste(italic("F")[ST])))+
geom_text(data = snpFst, aes(Pop, Pop2, label = Fst), color = ifelse(snpQ$Qval <= 0.05,"black", "darkgrey"), size = ifelse(snpQ$Qval < 0.05, 6, 5)) +
guides(fill=guide_colorbar(barwidth = 1, barheight = 12, title.position = "top", title.hjust = 0.5))+
scale_y_discrete(position = "right")+
scale_x_discrete(labels = str_wrap(snpFst$Pop, width = 6)) +
#ggtitle("   SNP") +
theme_minimal()
snpHeatmap = snpHeatmapA + theme(
axis.text.x = element_text(vjust = 1, size = 16, hjust = 0.5, color = "black"),
axis.text.y = element_text(size = 16, color = "black"),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
legend.justification = c(1, 0),
legend.position = "right",
legend.direction = "vertical",
legend.title = element_text(size = 16),
legend.text = element_text(size = 14),
plot.title = element_text(size = 16)
)
snpHeatmap
ggsave("snpHeatMap2.tiff", plot = snpHeatmap, width = 34, height = 15, units = "cm", dpi = 300)
ggsave("../figures/snpHeatMap2.tiff", plot = snpHeatmap, width = 34, height = 15, units = "cm", dpi = 300)
##Zoox and Depth
```{r, zooxDepth, eval = F}
install.packages("moments")
library(moments)
zooxProportions=read.csv("zooxProportions.csv", header=TRUE)
skewness(zooxProportions$fracZ, na.rm = TRUE)
zooxDepthPlot=ggplot(zooxProportions, aes(x=depth, y=fracZ)) +
geom_point()+
geom_smooth(method = "lm")
zooxDepthPlot
install.packages("car")
library(car)
leveneTest(fracZ ~ site*depthZone, data = zooxProportions)
res.aov3 <- aov(fracZ ~ site * depthZone, data = zooxProportions)
shapiro.test(zooxProportions$fracZ)
residualplot=plot(res.aov3, 2)
zooxAnova <- aov(fracZ ~ site * depthZone, data = zooxProportions)
Anova(zooxAnova, type = "III")
zooxBoxPlot=ggplot(zooxProportions, aes(x=site, y=fracZ, fill=depthZone)) +
geom_boxplot()
#Zoox Plot
dfZoox = read.csv("zooxProportionsUpdated.csv")
# This forces y axis labels to have 1 decimal place.
scale <- function(x) sprintf("%.0f", x)
# Plotting a boxplot of mean total colony size for each site at each timepoint.
total.colony.box.1 <-
ggplot(data = corr, aes(x = date, y = total.colony.size))+
geom_boxplot(aes(fill = site), alpha = 1, outlier.shape = NA, color = "black") +
geom_point(aes(fill = site), color = "black", size = 1.75, position = position_jitterdodge()) +
scale_fill_manual(values = c("#7BA46C", "#EACF9E", "#008D91")) +
scale_x_discrete(labels = c(expression('T'[1]), expression('T'[2]), expression('T'[3]), expression('T'[4])))+
labs(x = "Time", y = bquote("Total Colony Area" ~ (cm^2)),fill = 'Site') +
scale_y_continuous(labels = scale)+
theme(legend.title = element_blank(),
legend.text = element_text(color = "black", size = 18),
legend.background = element_blank(),
legend.position = "bottom")+
facet_grid(.~site,scales="free")
total.colony.box.1
total.colony.box <- total.colony.box.1 + theme(
panel.grid.major = element_line(size = 0.5, linetype = 'solid', colour = "white"),
panel.background = element_rect(fill = '#F5F5F5'),
plot.title = element_text(hjust = 0.5),
axis.line = element_line(colour = "black"),
axis.ticks = element_line(color="black"),
text = element_text(size = 22, color="black"),
axis.text.x=element_text(size = 18, color="black"),
axis.text.y=element_text(size = 18, color="black"),
legend.position = "none")
total.colony.box
# This forces y axis labels to have 1 decimal place.
scale <- function(x) sprintf("%.0f", x)
# Plotting a boxplot of mean healthy tissue area for each site at each timepoint.
healthy.colony.box.1 <-
ggplot(data = corr, aes(x = date, y = healthy.area))+
geom_boxplot(aes(fill = site), alpha = 1, outlier.shape = NA, color = "black") +
geom_point(aes(fill = site), color = "black", size = 1.75, position = position_jitterdodge()) +
scale_fill_manual(values = c("#7BA46C", "#EACF9E", "#008D91")) +
scale_x_discrete(labels = c(expression('T'[1]), expression('T'[2]), expression('T'[3]), expression('T'[4])))+
labs(x = "Time", y = bquote("Healthy Tissue Area" ~ (cm^2)),fill = 'Site') +
scale_y_continuous(labels = scale)+
theme(legend.title = element_blank(),
legend.text = element_text(color = "black", size = 18),
legend.background = element_blank(),
legend.position = "bottom")+
facet_grid(.~site,scales="free")
healthy.colony.box.1
healthy.colony.box <- healthy.colony.box.1 + theme(
panel.grid.major = element_line(size = 0.5, linetype = 'solid', colour = "white"),
panel.background = element_rect(fill = '#F5F5F5'),
plot.title = element_text(hjust = 0.5),
axis.line = element_line(colour = "black"),
axis.ticks = element_line(color="black"),
text = element_text(size = 22, color="black"),
axis.text.x=element_text(size = 18, color="black"),
axis.text.y=element_text(size = 18, color="black"),
legend.position = "none")
healthy.colony.box
# Plotting box plot of mean disease lesion area for each site at each timepoint.
disease.area.box.1 <-
ggplot(data = corr, aes(x = date, y = disease.area))+
geom_boxplot(aes(fill = site), alpha = 1, outlier.shape = NA, color = "black") +
geom_point(aes(fill = site), color = "black", size = 1.75, position = position_jitterdodge()) +
scale_fill_manual(values = c("#7BA46C", "#EACF9E", "#008D91")) +
scale_x_discrete(labels = c(expression('T'[1]), expression('T'[2]), expression('T'[3]), expression('T'[4])))+
labs(x = "Time", y = bquote('Disease Lesion Area'~(cm^2)), fill = 'Site') +
scale_y_continuous(labels = scale)+
theme(legend.title = element_blank(),
legend.text = element_text(color = "black", size = 18),
legend.background = element_blank(),
legend.position = "bottom")+
facet_grid(.~site,scales="free")
disease.area.box.1
disease.area.box <- disease.area.box.1 + theme(
panel.grid.major = element_line(size = 0.5, linetype = 'solid', colour = "white"),
panel.background = element_rect(fill = '#F5F5F5'),
plot.title = element_text(hjust = 0.5),
axis.line = element_line(colour = "black"),
axis.ticks = element_line(color="black"),
text = element_text(size = 22, color="black"),
axis.text.x=element_text(size = 18, color="black"),
axis.text.y=element_text(size = 18, color="black"),
legend.position = "none")
disease.area.box
box.plots.patch <- (total.colony.box | healthy.colony.box | disease.area.box) + plot_layout(guides = 'collect') + plot_annotation(tag_levels = 'a') &
theme(plot.tag = element_text(size = 28),
legend.position = "bottom")
ggsave("../figures/Fig4.png", plot = box.plots.patch, width = 15, height = 5, units = "in", dpi = 600)
box.plots.patch <- (total.colony.box | healthy.colony.box | disease.area.box) + plot_layout(guides = 'collect') + plot_annotation(tag_levels = 'a') &
theme(plot.tag = element_text(size = 28))
ggsave("../figures/Fig4.png", plot = box.plots.patch, width = 15, height = 5, units = "in", dpi = 600)
box.plots.patch <- (total.colony.box | healthy.colony.box | disease.area.box) + plot_layout(guides = 'collect') + plot_annotation(tag_levels = 'a') &
theme(plot.tag = element_text(size = 28))
ggsave("../figures/Fig4.png", plot = box.plots.patch, width = 12, height = 4, units = "in", dpi = 600)
ggsave("../figures/Fig4.png", plot = box.plots.patch, width = 14, height = 4, units = "in", dpi = 600)
box.plots.patch <- (total.colony.box | healthy.colony.box | disease.area.box) + plot_layout(guides = 'collect') + plot_annotation(tag_levels = 'a') &
theme(plot.tag = element_text(size = 28))
ggsave("../figures/Fig4.png", plot = box.plots.patch, width = 14, height = 4, units = "in", dpi = 600)
box.plots.patch <- (total.colony.box | healthy.colony.box | disease.area.box) + plot_layout(guides = 'collect') + plot_annotation(tag_levels = 'a') &
theme(plot.tag = element_text(size = 28))
ggsave("../figures/Fig4.png", plot = box.plots.patch, width = 14, height = 4, units = "in", dpi = 600)
box.plots.patch <- (total.colony.box | healthy.colony.box | disease.area.box) + plot_layout(guides = 'collect') + plot_annotation(tag_levels = 'a') &
theme(plot.tag = element_text(size = 28))
ggsave("../figures/Fig4.png", plot = box.plots.patch, width = 15, height = 4, units = "in", dpi = 600)
box.plots.patch <- (total.colony.box | healthy.colony.box | disease.area.box) + plot_layout(guides = 'collect') + plot_annotation(tag_levels = 'a') &
theme(plot.tag = element_text(size = 28))
ggsave("../figures/Fig4.png", plot = box.plots.patch, width = 15, height = 5, units = "in", dpi = 600)
