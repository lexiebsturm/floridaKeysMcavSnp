options(width = 88, scipen = 4)
getwd()
knitr::opts_knit$set(root.dir = '../revisedData')
getwd()
setwd("/Users/student/Documents/GitHub/floridaKeysMcavSnp/revisedData")
getwd()
if (!require("pacman")) install.packages("pacman")
pacman::p_load("adegenet", "cowplot", "dendextend", "flextable", "gdata", "ggdendro", "hierfstat", "Imap", "kableExtra", "paletteer", "patchwork", "officer", "poppr", "RColorBrewer", "reshape2", "StAMPP", "tidyverse", "vcfR", "vegan", "WGCNA", "boa", "plyr", "rgdal", "broom", "rgeos", "ggmap", "moments", "car", "multcompView", "lsmeans", "ggsn", "sf","ggspatial")
cloneBams = read.table("sampleList")[,1] # list of bam files
cloneMa = as.matrix(read.table("fkMcavClones.ibsMat")) # reads in IBS matrix produced by ANGSD
getwd()
cloneMa = as.matrix(read.table("fkMcavClones.ibsMat")) # reads in IBS matrix produced by ANGSD
setwd("/Users/student/Documents/GitHub/floridaKeysMcavSnp/revisedData")
setwd("/Users/student/Documents/GitHub/floridaKeysMcavSnp/revisedData")
cloneBams = read.table("sampleList")[,1] # list of bam files
setwd('../revisedData')
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, fig.align = 'left')
knitr::opts_knit$set(root.dir = '../revisedData')
options(width = 88, scipen = 4)
cloneBams = read.table("sampleList")[,1] # list of bam files
cloneMa = as.matrix(read.table("fkMcavClones.ibsMat")) # reads in IBS matrix produced by ANGSD
dimnames(cloneMa) = list(cloneBams,cloneBams)
clonesHc = hclust(as.dist(cloneMa),"ave")
cloneMeta = read.csv("inds2pops.csv") # list of bams files and their populations
clonePops = cloneMeta$pop
cloneDepth = cloneMeta$depth
cloneDend = cloneMa %>% as.dist() %>% hclust(.,"ave") %>% as.dendrogram()
cloneDData = cloneDend %>% dendro_data()
# Making the branches hang shorter so we can easily see clonal groups
cloneDData$segments$yend2 = cloneDData$segments$yend
for(i in 1:nrow(cloneDData$segments)) {
if (cloneDData$segments$yend2[i] == 0) {
cloneDData$segments$yend2[i] = (cloneDData$segments$y[i] - 0.03)}}
cloneDendPoints = cloneDData$labels
cloneDendPoints$pop = clonePops[order.dendrogram(cloneDend)]
cloneDendPoints$depth=cloneDepth[order.dendrogram(cloneDend)]
rownames(cloneDendPoints) = cloneDendPoints$label
# Making points at the leaves to place symbols for populations
point = as.vector(NA)
for(i in 1:nrow(cloneDData$segments)) {
if (cloneDData$segments$yend[i] == 0) {
point[i] = cloneDData$segments$y[i] - 0.03
} else {
point[i] = NA}}
cloneDendPoints$y = point[!is.na(point)]
techReps = c("009-1", "009-2", "009-3", "159-1", "159-2", "159-3", "171-1", "171-2", "171-3")
cloneDendPoints$depth=as.factor(cloneDendPoints$depth)
cloneDendPoints$depth = factor(cloneDendPoints$depth,levels(cloneDendPoints$depth)[c(2,1)])
cloneDendA = ggplot() +
geom_segment(data = segment(cloneDData), aes(x = x, y = y, xend = xend, yend = yend2), size = 0.5) +
geom_point(data = cloneDendPoints, aes(x = x, y = y, fill = pop, shape = depth), size = 4, stroke = 0.25) +
#scale_fill_brewer(palette = "Dark2", name = "Population") +
scale_fill_paletteer_d("LaCroixColoR::PassionFruit", breaks=c("TER-South","TER-North","Lower Keys", "Upper Keys"), name= "Population", labels = c("DRTS", "DRTN", "LK", "UK"))+
scale_shape_manual(values=c(21, 25), breaks=c("Shallow","Mesophotic"), name="Depth Zone")+
#geom_hline(yintercept = 0.1, color = "red", lty = 5, size = 0.75) + # creating a dashed line to indicate a clonal distance threshold
geom_text(data = subset(cloneDendPoints, subset = label %in% techReps), aes(x = x, y = (y - .015), label = label), angle = 90, size=5.5) + # spacing technical replicates further from leaf
#geom_text(data = subset(cloneDendPoints, subset = !label %in% techReps), aes(x = x, y = (y - .010), label = label), angle = 90) +
geom_text(data = subset(cloneDendPoints, subset = label %in% c("218", "223", "221", "226")), aes(x = (x+0.5), y = (y - .008), label = "*"), angle = 90, size = 10) + # labeling natural clones with asterisks
#geom_text(data = subset(cloneDendPoints, subset = label %in% techReps), aes(x = (x + .5), y = (y - .008), label = "â€ "), size = 6) + # labeling tech reps with dagger
#coord_cartesian(xlim = c(3, 84)) +
labs(y = "Genetic distance (1 - IBS)") +
guides(fill = guide_legend(override.aes = list(shape = 22, size=6)))+
theme_classic()
cloneDend
cloneDend
snpMa = as.matrix(read.table("fkMcavNoClones.ibsMat"))
fkMds = cmdscale(snpMa, eig = TRUE, x.ret = TRUE)
# Determine percent variation captured on each axis
# Calculate the eigenvalues so later we can figure out % variation shown on each Principal Coordinate
fkSnpPcoaVar = round(fkMds$eig/sum(fkMds$eig)*100, 1)
fkSnpPcoaVar
# Format data to plot
fkSnpPcoaValues = fkMds$points
fkSnpPcoaValues
snpI2P = read.csv("inds2popsNoClones.csv") # 2-column tab-delimited table of individual assignments to populations; must be in the same order as samples in the bam list or vcf file.
row.names(snpI2P) = snpI2P[,1]
fkSnpPcoaValues=cbind(snpI2P, fkSnpPcoaValues)
fkSnpPcoaValues =as.data.frame(fkSnpPcoaValues, sample = rownames(fkSnpPcoaValues))
colnames(fkSnpPcoaValues)[5] <- "PCo1"
colnames(fkSnpPcoaValues)[6] <- "PCo2"
fkSnpPcoaValues
snpPCoA = merge(fkSnpPcoaValues, aggregate(cbind(mean.x=PCo1,mean.y=PCo2)~popsite, fkSnpPcoaValues, mean), by="popsite")
snpPCoA$depth=as.factor(snpPCoA$depth)
snpPCoA$depth = factor(snpPCoA$depth, levels(snpPCoA$depth)[c(2,1)])
# SNP PCoA biplot
fkSnpPcoaPlotA = ggplot(snpPCoA, aes(x = PCo1, y = PCo2, color = pop, fill = pop, shape = depth, linetype = depth))+
geom_hline(yintercept = 0, color = "gray90", size = 0.5) +
geom_vline(xintercept = 0, color = "gray90", size = 0.5) +
stat_ellipse(data = subset(snpPCoA, type = "t", geom = "polygon", alpha = 0.1)) + #ellipse
scale_linetype_manual(values=c(1,2), breaks=c("Shallow","Mesophotic"), name = "Depth Zone")+
geom_point(aes(x = PCo1, y = PCo2, shape = depth), size = 3, alpha = 0.3, show.legend = FALSE, guide=FALSE) + #individual's points indicated by circles
scale_shape_manual(values = c(21,25), breaks=c("Shallow","Mesophotic"), name = "Depth Zone") +
geom_point(aes(x = mean.x, y = mean.y, shape = depth), size = 5, color = "black") + #population centroids indicated by triangles
scale_fill_paletteer_d("LaCroixColoR::PassionFruit", breaks=c("TER-South","TER-North","Lower Keys", "Upper Keys"), name= "Population", labels = c("DRTS", "DRTN", "LK", "UK"))+
scale_color_paletteer_d("LaCroixColoR::PassionFruit", breaks=c("TER-South","TER-North","Lower Keys", "Upper Keys"), name = " Population", guide=FALSE) +
xlab(paste ("PCo 1 (", fkSnpPcoaVar[1],"%)", sep = "")) + #Prints percent variation explained by first axis
ylab(paste ("PCo 2 (", fkSnpPcoaVar[2],"%)", sep = "")) + #Prints percent variation explained by second axis
guides(shape = guide_legend(order = 2), linetype = guide_legend(order = 3), fill = guide_legend(override.aes = list(shape = 22, size = 4), order = 1))+
theme_bw()
fkSnpPcoaPlot = fkSnpPcoaPlotA +
theme(axis.title.x = element_text(color = "black", size = 10),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.line.x = element_blank(),
axis.title.y = element_text(color = "black", size = 10),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
axis.line.y = element_blank(),
legend.position = "left",
panel.border = element_rect(color = "black", size = 1.2),
panel.background = element_rect(fill = "white"),
plot.background = element_rect(fill = "white"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
fkSnpPcoaPlot
fkVcf = read.vcfR("fkMcavNoClones.bcf")
fkGenlightPopDepth = vcfR2genlight(fkVcf, n.cores = 2) # Converts the vcf file into a file format that poppr uses the "genlight" format
locNames(fkGenlightPopDepth) = paste(fkVcf@fix[,1],fkVcf@fix[,2],sep="_")
popData = read.csv("inds2popsNoClonesPopDepth.csv") # Reads in population data for each sample
strata(fkGenlightPopDepth) = data.frame(popData)
setPop(fkGenlightPopDepth) = ~popdepth
amova <- poppr.amova(fkGenlightPopDepth, ~popdepth) #Runs AMOVA
amova
set.seed(1999)
amovasignif <- randtest(amova, nrepet = 99) #Calculates significance levels of the AMOVA with 99 permutations
amovasignif
amovasignif
amovasignif
fkGenlightPopDepth$pop=as.factor(fkGenlightPopDepth$pop)
fkGenlightPopDepth$pop = factor(fkGenlightPopDepth$pop, levels(fkGenlightPopDepth$pop)[c(4,3,2,1,5,6,8,7)])
set.seed(694)
fk.fst <- stamppFst(fkGenlightPopDepth, nboots = 99, percent = 95, nclusters = 4) #99 permutations
fk.fst$Fsts
fk.fst$Pvalues
pca.1 <- glPca(fkGenlightPopDepth, nf=300, n.cores=1)
pop.order <- c("TER-South-Shallow", "TER-South-Mesophotic",  "TER-North-Shallow", "TER-North-Mesophotic", "Lower Keys-Shallow", "Lower Keys-Mesophotic", "Upper Keys-Shallow", "Upper Keys-Mesophotic")
# reads in fst matrix
snpFstMa <- as.matrix(fk.fst$Fsts)
upperTriangle(snpFstMa, byrow=TRUE) <- lowerTriangle(snpFstMa)
snpFstMa <- snpFstMa[,pop.order] %>%
.[pop.order,]
snpFstMa[upper.tri(snpFstMa)] <- NA
snpFstMa <- as.data.frame(snpFstMa)
snpFstMa$Pop = factor(row.names(snpFstMa), levels = unique(pop.order))
snpQMa <- as.matrix(fk.fst$Pvalues)
upperTriangle(snpQMa, byrow=TRUE) <- lowerTriangle(snpQMa)
snpQMa <- snpQMa[,pop.order] %>%
.[pop.order,]
snpQMa[upper.tri(snpQMa)] <- NA
snpQMa <- as.data.frame(snpQMa)
snpQMa$Pop = factor(row.names(snpQMa), levels = unique(pop.order))
snpFstMa$Pop = factor(row.names(snpFstMa), levels = unique(pop.order))
snpFst = melt(snpFstMa, id.vars = "Pop", value.name = "Fst", variable.name = "Pop2", na.rm = TRUE)
snpFst = snpFst[snpFst$Pop != snpFst$Pop2,]
snpFst$Fst = round(snpFst$Fst, 3)
snpFst = snpFst %>% mutate(Fst = replace(Fst, Fst < 0, 0))
head(snpFst)
snpQ = melt(snpQMa, id.vars = "Pop", value.name = "Pval", variable.name = "Pop2", na.rm = TRUE)
snpQ = snpQ[snpQ$Pop != snpQ$Pop2,]
snpQ$Qval = p.adjust(snpQ$Pval, method = "BH")
head(snpQ)
snpHeatmapA = ggplot(data = snpFst, aes(Pop, Pop2, fill = Fst))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "white", high = "red", midpoint = 0, limit = c(0, 0.1),
space = "Lab", name = expression(paste(italic("F")[ST])))+
geom_text(data = snpFst, aes(Pop, Pop2, label = Fst), color = ifelse(snpQ$Qval <= 0.05,"black", "darkgrey"), size = ifelse(snpQ$Qval < 0.05, 6, 5)) +
guides(fill=guide_colorbar(barwidth = 1, barheight = 12, title.position = "top", title.hjust = 0.5))+
scale_y_discrete(position = "right", labels=c("DRTS-Shallow", "DRTS-Mesophotic", "DRTN-Shallow","DRTN-Mesophotic","LK-Shallow", "LK-Mesophotic", "UK-Shallow"))+
scale_x_discrete(labels = str_wrap(c("DRTS-Mesophotic", "DRTN-Shallow","DRTN-Mesophotic","LK-Shallow", "LK-Mesophotic", "UK-Shallow", "UK-Mesophotic"), width = 6)) +
#ggtitle("   SNP") +
theme_minimal()
snpHeatmap = snpHeatmapA + theme(
axis.text.x = element_text(vjust = 1, size = 16, hjust = 0.5, color = "black"),
axis.text.y = element_text(size = 16, color = "black"),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
legend.position = "right",
legend.direction = "vertical",
legend.title = element_text(size = 16),
legend.text = element_text(size = 14),
plot.title = element_text(size = 16)
)
snpHeatmap
ggsave("../revisedFigures/snpHeatMap.tiff", plot = snpHeatmap, width = 34, height = 15, units = "cm", dpi = 300)
ggsave("../revisedFigures/fig3.eps", plot = snpHeatmap, width = 34, height = 15, units = "cm", dpi = 300)
fkVcf = read.vcfR("fkMcavNoClones.bcf")
fkGenlightPopDepth = vcfR2genlight(fkVcf, n.cores = 2) # Converts the vcf file into a file format that poppr uses the "genlight" format
fkGenlightPopDepth = vcfR2genlight(fkVcf, n.cores = 2) # Converts the vcf file into a file format that poppr uses the "genlight" format
locNames(fkGenlightPopDepth) = paste(fkVcf@fix[,1],fkVcf@fix[,2],sep="_")
popData = read.csv("inds2popsNoClonesPopDepth.csv") # Reads in population data for each sample
strata(fkGenlightPopDepth) = data.frame(popData)
setPop(fkGenlightPopDepth) = ~popdepth
amova <- poppr.amova(fkGenlightPopDepth, ~popdepth) #Runs AMOVA
amova
set.seed(1999)
amovasignif <- randtest(amova, nrepet = 99) #Calculates significance levels of the AMOVA with 99 permutations
amovasignif <- randtest(amova, nrepet = 99) #Calculates significance levels of the AMOVA with 99 permutations
amovasignif
pop.order <- c("TER-South-Shallow", "TER-South-Mesophotic",  "TER-North-Shallow", "TER-North-Mesophotic", "Lower Keys-Shallow", "Lower Keys-Mesophotic", "Upper Keys-Shallow", "Upper Keys-Mesophotic")
# reads in fst matrix
snpFstMa <- as.matrix(fk.fst$Fsts)
upperTriangle(snpFstMa, byrow=TRUE) <- lowerTriangle(snpFstMa)
snpFstMa <- snpFstMa[,pop.order] %>%
.[pop.order,]
snpFstMa[upper.tri(snpFstMa)] <- NA
snpFstMa <- as.data.frame(snpFstMa)
snpFstMa$Pop = factor(row.names(snpFstMa), levels = unique(pop.order))
snpQMa <- as.matrix(fk.fst$Pvalues)
upperTriangle(snpQMa, byrow=TRUE) <- lowerTriangle(snpQMa)
snpQMa <- snpQMa[,pop.order] %>%
.[pop.order,]
snpQMa[upper.tri(snpQMa)] <- NA
snpQMa <- as.data.frame(snpQMa)
snpQMa$Pop = factor(row.names(snpQMa), levels = unique(pop.order))
snpFstMa$Pop = factor(row.names(snpFstMa), levels = unique(pop.order))
snpFst = melt(snpFstMa, id.vars = "Pop", value.name = "Fst", variable.name = "Pop2", na.rm = TRUE)
snpFst = snpFst[snpFst$Pop != snpFst$Pop2,]
snpFst$Fst = round(snpFst$Fst, 3)
snpFst = snpFst %>% mutate(Fst = replace(Fst, Fst < 0, 0))
head(snpFst)
snpQ = melt(snpQMa, id.vars = "Pop", value.name = "Pval", variable.name = "Pop2", na.rm = TRUE)
snpQ = snpQ[snpQ$Pop != snpQ$Pop2,]
snpQ$Qval = p.adjust(snpQ$Pval, method = "BH")
head(snpQ)
snpHeatmapA = ggplot(data = snpFst, aes(Pop, Pop2, fill = Fst))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "white", high = "red", midpoint = 0, limit = c(0, 0.1),
space = "Lab", name = expression(paste(italic("F")[ST])))+
geom_text(data = snpFst, aes(Pop, Pop2, label = Fst), color = ifelse(snpQ$Qval <= 0.05,"black", "darkgrey"), size = ifelse(snpQ$Qval < 0.05, 6, 5), face = ifelse(snpQ$Qval < 0.05, "bold", "plain")) +
guides(fill=guide_colorbar(barwidth = 1, barheight = 12, title.position = "top", title.hjust = 0.5))+
scale_y_discrete(position = "right", labels=c("DRTS-Shallow", "DRTS-Mesophotic", "DRTN-Shallow","DRTN-Mesophotic","LK-Shallow", "LK-Mesophotic", "UK-Shallow"))+
scale_x_discrete(labels = str_wrap(c("DRTS-Mesophotic", "DRTN-Shallow","DRTN-Mesophotic","LK-Shallow", "LK-Mesophotic", "UK-Shallow", "UK-Mesophotic"), width = 6)) +
#ggtitle("   SNP") +
theme_minimal()
snpHeatmap = snpHeatmapA + theme(
axis.text.x = element_text(vjust = 1, size = 16, hjust = 0.5, color = "black"),
axis.text.y = element_text(size = 16, color = "black"),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
legend.position = "right",
legend.direction = "vertical",
legend.title = element_text(size = 16),
legend.text = element_text(size = 14),
plot.title = element_text(size = 16)
)
snpHeatmap
snpHeatmap
ggsave("../revisedFigures/snpHeatMap.tiff", plot = snpHeatmap, width = 34, height = 15, units = "cm", dpi = 300)
snpHeatmapA = ggplot(data = snpFst, aes(Pop, Pop2, fill = Fst))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "white", high = "red", midpoint = 0, limit = c(0, 0.1),
space = "Lab", name = expression(paste(italic("F")[ST])))+
geom_text(data = snpFst, aes(Pop, Pop2, label = Fst), color = ifelse(snpQ$Qval <= 0.05,"black", "darkgrey"), size = ifelse(snpQ$Qval < 0.05, 6, 5), face = ifelse(snpQ$Qval < 0.05, "italics", "plain")) +
guides(fill=guide_colorbar(barwidth = 1, barheight = 12, title.position = "top", title.hjust = 0.5))+
scale_y_discrete(position = "right", labels=c("DRTS-Shallow", "DRTS-Mesophotic", "DRTN-Shallow","DRTN-Mesophotic","LK-Shallow", "LK-Mesophotic", "UK-Shallow"))+
scale_x_discrete(labels = str_wrap(c("DRTS-Mesophotic", "DRTN-Shallow","DRTN-Mesophotic","LK-Shallow", "LK-Mesophotic", "UK-Shallow", "UK-Mesophotic"), width = 6)) +
#ggtitle("   SNP") +
theme_minimal()
snpHeatmap
snpHeatmap
ggsave("../revisedFigures/snpHeatMap.tiff", plot = snpHeatmap, width = 34, height = 15, units = "cm", dpi = 300)
snpHeatmapA = ggplot(data = snpFst, aes(Pop, Pop2, fill = Fst))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "white", high = "red", midpoint = 0, limit = c(0, 0.1),
space = "Lab", name = expression(paste(italic("F")[ST])))+
geom_text(data = snpFst, aes(Pop, Pop2, label = Fst), color = ifelse(snpQ$Qval <= 0.05,"black", "darkgrey"), size = ifelse(snpQ$Qval < 0.05, 6, 5), fontface = ifelse(snpQ$Qval <= 0.05, "italics", "plain")) +
guides(fill=guide_colorbar(barwidth = 1, barheight = 12, title.position = "top", title.hjust = 0.5))+
scale_y_discrete(position = "right", labels=c("DRTS-Shallow", "DRTS-Mesophotic", "DRTN-Shallow","DRTN-Mesophotic","LK-Shallow", "LK-Mesophotic", "UK-Shallow"))+
scale_x_discrete(labels = str_wrap(c("DRTS-Mesophotic", "DRTN-Shallow","DRTN-Mesophotic","LK-Shallow", "LK-Mesophotic", "UK-Shallow", "UK-Mesophotic"), width = 6)) +
#ggtitle("   SNP") +
theme_minimal()
snpHeatmap = snpHeatmapA + theme(
axis.text.x = element_text(vjust = 1, size = 16, hjust = 0.5, color = "black"),
axis.text.y = element_text(size = 16, color = "black"),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
legend.position = "right",
legend.direction = "vertical",
legend.title = element_text(size = 16),
legend.text = element_text(size = 14),
plot.title = element_text(size = 16)
)
snpHeatmap
snpHeatmapA = ggplot(data = snpFst, aes(Pop, Pop2, fill = Fst))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "white", high = "red", midpoint = 0, limit = c(0, 0.1),
space = "Lab", name = expression(paste(italic("F")[ST])))+
geom_text(data = snpFst, aes(Pop, Pop2, label = Fst), color = ifelse(snpQ$Qval <= 0.05,"black", "darkgrey"), size = ifelse(snpQ$Qval < 0.05, 6, 5), fontface = ifelse(snpQ$Qval <= 0.05, "italic", "plain")) +
guides(fill=guide_colorbar(barwidth = 1, barheight = 12, title.position = "top", title.hjust = 0.5))+
scale_y_discrete(position = "right", labels=c("DRTS-Shallow", "DRTS-Mesophotic", "DRTN-Shallow","DRTN-Mesophotic","LK-Shallow", "LK-Mesophotic", "UK-Shallow"))+
scale_x_discrete(labels = str_wrap(c("DRTS-Mesophotic", "DRTN-Shallow","DRTN-Mesophotic","LK-Shallow", "LK-Mesophotic", "UK-Shallow", "UK-Mesophotic"), width = 6)) +
#ggtitle("   SNP") +
theme_minimal()
snpHeatmap = snpHeatmapA + theme(
axis.text.x = element_text(vjust = 1, size = 16, hjust = 0.5, color = "black"),
axis.text.y = element_text(size = 16, color = "black"),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
legend.position = "right",
legend.direction = "vertical",
legend.title = element_text(size = 16),
legend.text = element_text(size = 14),
plot.title = element_text(size = 16)
)
snpHeatmap
snpHeatmapA = ggplot(data = snpFst, aes(Pop, Pop2, fill = Fst))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "white", high = "red", midpoint = 0, limit = c(0, 0.1),
space = "Lab", name = expression(paste(italic("F")[ST])))+
geom_text(data = snpFst, aes(Pop, Pop2, label = Fst), color = ifelse(snpQ$Qval <= 0.05,"black", "darkgrey"), size = ifelse(snpQ$Qval < 0.05, 6, 5), fontface = ifelse(snpQ$Qval <= 0.05, "bold", "plain")) +
guides(fill=guide_colorbar(barwidth = 1, barheight = 12, title.position = "top", title.hjust = 0.5))+
scale_y_discrete(position = "right", labels=c("DRTS-Shallow", "DRTS-Mesophotic", "DRTN-Shallow","DRTN-Mesophotic","LK-Shallow", "LK-Mesophotic", "UK-Shallow"))+
scale_x_discrete(labels = str_wrap(c("DRTS-Mesophotic", "DRTN-Shallow","DRTN-Mesophotic","LK-Shallow", "LK-Mesophotic", "UK-Shallow", "UK-Mesophotic"), width = 6)) +
#ggtitle("   SNP") +
theme_minimal()
snpHeatmap = snpHeatmapA + theme(
axis.text.x = element_text(vjust = 1, size = 16, hjust = 0.5, color = "black"),
axis.text.y = element_text(size = 16, color = "black"),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
legend.position = "right",
legend.direction = "vertical",
legend.title = element_text(size = 16),
legend.text = element_text(size = 14),
plot.title = element_text(size = 16)
)
snpHeatmap
ggsave("../revisedFigures/snpHeatMap.tiff", plot = snpHeatmap, width = 34, height = 15, units = "cm", dpi = 300)
ggsave("../revisedFigures/fig3.eps", plot = snpHeatmap, width = 34, height = 15, units = "cm", dpi = 300)
fknmsshpfile <- read.csv("fknmsSPA.csv", header = TRUE) %>% filter(type != "SPA") %>% droplevels()
fkSites = read.csv("sample-sites.csv", header=TRUE)
levels(fkSites$General.Site)
fkSites$General.Site <- factor(fkSites$General.Site, levels = c("Lower-Keys", "TER-North",  "TER-South", "Upper-Keys"))
baseMap <- get_stamenmap(bbox = c(left = -83,
bottom = 24,
right = -80,
top = 26),
maptype = "terrain-background",
crop = FALSE,
zoom = 10)
fkMap=ggmap(baseMap)+
geom_polypath(data = fknmsshpfile, aes(x = long, y = lat, group = location), color="dark red", alpha=.2, size=.2) +
geom_point(data = fkSites, size = 3, aes(x = Lon, y = Lat, fill=General.Site, shape=Depth.Zone)) +
scale_fill_paletteer_d("LaCroixColoR::PassionFruit", name= "Population", breaks=c("TER-South","TER-North","Lower-Keys", "Upper-Keys"), labels = c("DTS", "DTN", "LK", "UK"))+ scale_shape_manual(values = c(21,25), name = "Depth Zone", breaks=c("Shallow", "Mesophotic")) + # define shape/color scales
scale_y_continuous(label=function(x){return(paste(x,"Â°N"))}, expand = c(0, 0))+
scale_x_continuous(label=function(x){return(paste(-x,"Â°W"))}, expand = c(0, 0))+
guides(fill = guide_legend(override.aes = list(shape = 22, size= 4)))+
guides(shape = guide_legend(override.aes = list(size= 4)))+
theme_bw() +
theme(legend.position = "right",
axis.title.x = element_blank(),
axis.title.y = element_blank(),
plot.background = element_blank())
mainMap = fkMap +
geom_rect(aes(xmin = -83.25, xmax = -82.95, ymin = 24.45, ymax = 24.75), color = "black", fill = NA, size = 0.4) +
geom_rect(aes(xmin = -80.35, xmax = -80.15, ymin = 25.1, ymax = 25.3), color = "black", fill = NA, size = 0.4) +
geom_rect(aes(xmin = -81.7, xmax = -81.5, ymin = 24.45, ymax = 24.65), color = "black", fill = NA, size = 0.4) +
ggsn::scalebar(x.min = -83,
y.min = 24,
x.max = -80,
y.max = 26,
dist = 50, transform = TRUE,
model = "WGS84",
dist_unit="km", st.bottom=TRUE, st.dist=.03, st.size=3) +
annotation_north_arrow(location= "topright", height = unit(1, "cm"),
width = unit(0.75, "cm"), style = north_arrow_orienteering)
upperKeys = fkMap +
coord_sf(xlim = c(-80.35, -80.15), ylim = c(25.1, 25.3)) +
scale_x_continuous(breaks = c(seq(-80.4, -80.0, by = .1))) +
scale_y_continuous(breaks = c(seq(25.0, 25.3, by = .1))) +
ggsn::scalebar(x.min = -80.35,
y.min = 25.105,
x.max = -80.16,
y.max = 25.3,
dist = 5, transform = TRUE,
model = "WGS84",
dist_unit="km", st.bottom=TRUE, st.dist=.03, st.size=3)+
theme(legend.position = "none",
axis.title = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank())
lowerKeys = fkMap +
coord_sf(xlim = c(-81.7, -81.5), ylim = c(24.45, 24.65)) +
scale_x_continuous(breaks = c(seq(-81.7, -81.3, by = .1))) +
scale_y_continuous(breaks = c(seq(24.4, 24.7, by = .1))) +
ggsn::scalebar(x.min = -81.7,
y.min = 24.455,
x.max = -81.51,
y.max = 24.65,
dist = 5, transform = TRUE,
model = "WGS84",
dist_unit="km", st.bottom=TRUE, st.dist=.03, st.size=3)+
theme(legend.position = "none",
axis.title = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank())
dryTortugas = fkMap +
coord_sf(xlim = c(-83.25, -82.95), ylim = c(24.45, 24.75)) +
scale_x_continuous(breaks = c(seq(-83.2, -82.9, by = .1))) +
scale_y_continuous(breaks = c(seq(24.4, 24.7, by = .1))) +
ggsn::scalebar(x.min = -83.25,
y.min = 24.455,
x.max = -82.96,
y.max = 24.75,
dist = 5, transform = TRUE,
model = "WGS84",
dist_unit="km", st.bottom=TRUE, st.dist=.03, st.size=3)+
theme(legend.position = "none",
axis.title = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank())
fknmsMap = ggdraw() +
draw_plot(mainMap) +
draw_plot(upperKeys, x = .62, y = 0.125, width = 0.3, height = 0.3) +
draw_plot(lowerKeys, x = 0.25, y = 0.45, width = 0.3, height = 0.3) +
draw_plot(dryTortugas, x = 0.01, y = 0.6, width = 0.3, height = 0.3)
ggsave("../revisedFigures/fig1.tiff", plot=fknmsMap, height = 20, width = 30, unit = "cm", dpi = 300)
ggsave("../revisedFigures/fig1.eps", plot=fkMap, height = 20, width = 25, unit = "cm", dpi = 300)
dfZoox = read.csv("zooxGenomeAlignments.csv")
dfZoox$popsite=as.factor(dfZoox$popsite)
dfZoox$popsite
dfZoox$popsite = factor(dfZoox$popsite, levels = levels(dfZoox$popsite)[c(6,5,4,3,2,1,8,7)])
dfZoox$popsite
levels(dfZoox$Population) = c("DTS-Shallow", "DTS-Mesophotic", "DTN-Shallow", "DTN-Mesophotic", "LK-Shallow", "LK-Mesophotic", "UK-Shallow", "UK-Mesophotic")
levels(dfZoox$popsite) = c("DTS-Shallow", "DTS-Mesophotic", "DTN-Shallow", "DTN-Mesophotic", "LK-Shallow", "LK-Mesophotic", "UK-Shallow", "UK-Mesophotic")
levels(dfZoox$popsite)
dfZoox = dfZoox[order(dfZoox$popsite),]
dfZoox$Order = c(1:nrow(dfZoox))
zDat = melt(dfZoox, id.vars = c("sample", "popsite", "Order"), variable.name = "Symbiont", value.name = "Fraction")
colPalZoox = brewer.pal(4, "BrBG")
names(colPalZoox) = levels(zDat$Symbiont)
dfZoox = read.csv("zooxGenomeAlignments.csv")
dfZoox$popsite=as.factor(dfZoox$popsite)
dfZoox$popsite = factor(dfZoox$popsite, levels = levels(dfZoox$popsite)[c(6,5,4,3,2,1,8,7)])
levels(dfZoox$popsite) = c("DTS-Shallow", "DTS-Mesophotic", "DTN-Shallow", "DTN-Mesophotic", "LK-Shallow", "LK-Mesophotic", "UK-Shallow", "UK-Mesophotic")
dfZoox = dfZoox[order(dfZoox$popsite),]
dfZoox$Order = c(1:nrow(dfZoox))
zDat = melt(dfZoox, id.vars = c("sample", "popsite", "Order"), variable.name = "Symbiont", value.name = "Fraction")
colPalZoox = brewer.pal(4, "BrBG")
names(colPalZoox) = levels(zDat$Symbiont)
zooxPlotA = ggplot(data = zDat, aes(x = Order, y = Fraction, fill = Symbiont, order = Order)) +
geom_bar(stat = "identity", position = "stack", colour = "grey25", width = 1) +
xlab("Population") +
scale_x_discrete(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0), labels = function(x) paste0(x*100, "%")) +
scale_fill_manual(values = colPalZoox, name = "Symbiodiniaceae genus") +
coord_cartesian(ylim = c(-.01,1.01)) +
facet_grid(.~fct_inorder(Population), drop=TRUE, scales = "free", switch = "x", space = "free") +
theme_bw()
zooxPlot = zooxPlotA + theme(plot.title = element_text(hjust = 0.5),
panel.grid=element_blank(),
panel.background=element_rect(fill=NA, colour="grey25"),
panel.spacing.x=grid:::unit(0, "lines"),
panel.border = element_rect(color="black", size=2, linetype="solid"),
axis.text.y=element_text(size=14),
axis.text.x = element_blank(),
axis.title.y = element_blank(),
axis.ticks.x=element_blank(),
strip.background=element_blank(),
strip.text=element_text(size=12, angle=90),
legend.key=element_blank(),
legend.position = "right",
#legend.title = element_blank(),
legend.text = element_text(face = "italic"))
zooxPlot
zooxPlotA = ggplot(data = zDat, aes(x = Order, y = Fraction, fill = Symbiont, order = Order)) +
geom_bar(stat = "identity", position = "stack", colour = "grey25", width = 1) +
xlab("Population") +
scale_x_discrete(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0), labels = function(x) paste0(x*100, "%")) +
scale_fill_manual(values = colPalZoox, name = "Symbiodiniaceae genus") +
coord_cartesian(ylim = c(-.01,1.01)) +
facet_grid(.~fct_inorder(popsite), drop=TRUE, scales = "free", switch = "x", space = "free") +
theme_bw()
zooxPlot = zooxPlotA + theme(plot.title = element_text(hjust = 0.5),
panel.grid=element_blank(),
panel.background=element_rect(fill=NA, colour="grey25"),
panel.spacing.x=grid:::unit(0, "lines"),
panel.border = element_rect(color="black", size=2, linetype="solid"),
axis.text.y=element_text(size=14),
axis.text.x = element_blank(),
axis.title.y = element_blank(),
axis.ticks.x=element_blank(),
strip.background=element_blank(),
strip.text=element_text(size=12, angle=90),
legend.key=element_blank(),
legend.position = "right",
#legend.title = element_blank(),
legend.text = element_text(face = "italic"))
zooxPlot
ggsave("../revisedFigures/zooxPlot.tiff", plot = zooxPlot, width = 30, height = 15, units = "cm", dpi = 300)
fkVcf
